//! Actor lifecycle systems (death handling, despawn)

use bevy::prelude::*;
use godot::prelude::*;
use godot::classes::{MeshInstance3D, StandardMaterial3D, Material, NavigationAgent3D};
use voidrun_simulation::Health;
use crate::shared::VisualRegistry;
use voidrun_simulation::logger;
/// Disable collision for dead actors (HP == 0) + full cleanup + schedule despawn after 5 sec
///
/// **Complete cleanup for dead actors:**
/// - –û—Ç–∫–ª—é—á–∞–µ—Ç collision (layer/mask = 0) —É CharacterBody3D
/// - –û—Ç–∫–ª—é—á–∞–µ—Ç NavigationAgent3D (avoidance_enabled = false, set_velocity_forced = 0)
/// - –ö—Ä–∞—Å–∏—Ç –≤—Å–µ MeshInstance3D –≤ —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
/// - –£–¥–∞–ª—è–µ—Ç VisionCone (Area3D) –µ—Å–ª–∏ –µ—Å—Ç—å
/// - –û—Ç–∫–ª—é—á–∞–µ—Ç AvoidanceReceiver (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è signal callbacks)
/// - –î–æ–±–∞–≤–ª—è–µ—Ç DespawnAfter –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (desp spawn —á–µ—Ä–µ–∑ 5 —Å–µ–∫)
///
/// **Result:** Dead actor –±–æ–ª—å—à–µ –Ω–µ –º–µ—à–∞–µ—Ç –∂–∏–≤—ã–º (no collision, no pathfinding, no vision)
pub fn disable_collision_on_death_main_thread(
    query: Query<(Entity, &Health), Changed<Health>>,
    visuals: NonSend<VisualRegistry>,
    mut commands: Commands,
    time: Res<Time>,
) {
    use godot::classes::{CharacterBody3D, Node};

    for (entity, health) in query.iter() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–∫—Ç—ë—Ä –º—ë—Ä—Ç–≤ (HP == 0)
        if health.current > 0 {
            continue;
        }

        // –ü–æ–ª—É—á–∞–µ–º Godot node
        let Some(actor_node) = visuals.visuals.get(&entity) else {
            continue;
        };

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å CharacterBody3D (root node –≤ test_actor.tscn)
        if let Some(mut body) = actor_node.clone().try_cast::<CharacterBody3D>().ok() {
            // ========================================
            // 1. CORPSE COLLISION (—Ç–æ–ª—å–∫–æ —Å Environment, –Ω–µ —Å Actors/Projectiles)
            // ========================================
            // –¢—Ä—É–ø –ª–µ–∂–∏—Ç –Ω–∞ –∑–µ–º–ª–µ (–Ω–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è), –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∂–∏–≤—ã—Ö
            body.set_collision_layer(crate::collision_layers::COLLISION_LAYER_CORPSES);
            body.set_collision_mask(crate::collision_layers::COLLISION_MASK_CORPSES);

            // ========================================
            // 2. –û–¢–ö–õ–Æ–ß–ê–ï–ú NAVIGATIONAGENT3D
            // ========================================
            if let Some(mut nav_agent) = actor_node.try_get_node_as::<NavigationAgent3D>("NavigationAgent3D") {
                nav_agent.set_avoidance_enabled(false); // –û—Ç–∫–ª—é—á–∏—Ç—å avoidance (–Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º)
                nav_agent.set_velocity_forced(Vector3::ZERO); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
                nav_agent.set_target_position(actor_node.get_global_position()); // –°–±—Ä–æ—Å–∏—Ç—å target (stop pathfinding)
                logger::log(&format!("  ‚Üí NavigationAgent3D disabled (entity {:?})", entity));
            }

            // ========================================
            // 3. –£–î–ê–õ–Ø–ï–ú VISIONCONE (–µ—Å–ª–∏ –µ—Å—Ç—å)
            // ========================================
            if let Some(mut vision_cone) = actor_node.try_get_node_as::<godot::classes::Area3D>("VisionCone") {
                vision_cone.set_monitoring(false); // –û—Ç–∫–ª—é—á–∏—Ç—å collision detection
                vision_cone.queue_free(); // –£–¥–∞–ª–∏—Ç—å node (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ)
                logger::log(&format!("  ‚Üí VisionCone removed (entity {:?})", entity));
            }

            // ========================================
            // 4. –û–¢–ö–õ–Æ–ß–ê–ï–ú AVOIDANCERECEIVER (signal callbacks)
            // ========================================
            if let Some(mut receiver) = actor_node.try_get_node_as::<Node>("AvoidanceReceiver") {
                receiver.set_process_mode(godot::classes::node::ProcessMode::DISABLED);
                logger::log(&format!("  ‚Üí AvoidanceReceiver disabled (entity {:?})", entity));
            }

            // ========================================
            // 5. –ö–†–ê–°–ò–ú –í–°–ï MESHINSTANCE3D –í –°–ï–†–´–ô
            // ========================================
            for i in 0..body.get_child_count() {
                if let Some(mut mesh) = body.get_child(i).and_then(|c| c.try_cast::<MeshInstance3D>().ok()) {
                    let mut material = StandardMaterial3D::new_gd();
                    material.set_albedo(Color::from_rgb(0.4, 0.4, 0.4)); // –°–µ—Ä—ã–π
                    mesh.set_surface_override_material(0, &material.upcast::<Material>());
                }
            }

            logger::log(&format!(
                "üíÄ Entity {:?} died ‚Äî FULL CLEANUP: corpse collision (Environment only), nav off, vision off, gray painted, despawn in 5 sec",
                entity
            ));

            // ========================================
            // 6. SCHEDULE DESPAWN AFTER 5 SECONDS
            // ========================================
            let despawn_time = time.elapsed_secs() + 5.0;
            commands.entity(entity).insert(voidrun_simulation::combat::DespawnAfter { despawn_time });
        }
    }
}

/// Despawn Godot visuals for despawned ECS entities
///
/// –£–¥–∞–ª—è–µ—Ç Godot nodes –∫–æ–≥–¥–∞ ECS entity –¥–µ—Å–ø–∞–≤–Ω–∏—Ç—Å—è.
/// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ Update –ø–æ—Å–ª–µ despawn_after_timeout.
pub fn despawn_actor_visuals_main_thread(
    mut removed: RemovedComponents<voidrun_simulation::Actor>,
    mut visuals: NonSendMut<VisualRegistry>,
) {
    for entity in removed.read() {
        // –£–¥–∞–ª—è–µ–º Godot node
        if let Some(mut node) = visuals.visuals.remove(&entity) {
            logger::log(&format!("üóëÔ∏è Removing Godot node for entity {:?}", entity));
            node.queue_free(); // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (Godot safe)
        }

        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ entries –≤ registry
        visuals.health_labels.remove(&entity);
        visuals.stamina_labels.remove(&entity);
        visuals.ai_state_labels.remove(&entity);
        // node_to_entity –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ queue_free
    }
}

// –£–î–ê–õ–ï–ù–û: sync_transforms_main_thread
// ADR-005: Godot Transform authoritative (–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑ ECS)
// Transform –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ CharacterBody3D.move_and_slide()
// StrategicPosition sync —Ç–æ–ª—å–∫–æ –ø—Ä–∏ zone transitions (0.1-1 Hz)
