//! GodotProjectileRegistry ‚Äî track Godot-managed projectiles for collision processing
//!
//! # Architecture
//! - –•—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ GodotProjectile nodes –¥–ª—è collision processing
//! - –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π frame (–¥–æ–±–∞–≤–ª—è–µ–º new projectiles, —É–¥–∞–ª—è–µ–º destroyed)
//! - ECS —Å–∏—Å—Ç–µ–º–∞ —á–∏—Ç–∞–µ—Ç collision_info –∏–∑ projectiles ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç events

use godot::prelude::*;
use std::collections::HashMap;
use crate::projectile::GodotProjectile;
use voidrun_simulation::logger;

/// Registry –¥–ª—è Godot projectiles
///
/// –•—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ GodotProjectile nodes –¥–ª—è collision processing.
/// –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π frame (–¥–æ–±–∞–≤–ª—è–µ–º new projectiles, —É–¥–∞–ª—è–µ–º destroyed).
#[derive(Default)]
pub struct GodotProjectileRegistry {
    /// InstanceId ‚Üí GodotProjectile node
    pub projectiles: HashMap<InstanceId, Gd<GodotProjectile>>,
}

impl GodotProjectileRegistry {
    /// Register new projectile
    pub fn register(&mut self, projectile: Gd<GodotProjectile>) {
        let instance_id = projectile.instance_id();
        self.projectiles.insert(instance_id, projectile);
        logger::log(&format!("üìã Registered projectile: {:?}", instance_id));
    }

    /// Unregister projectile (after despawn)
    pub fn unregister(&mut self, instance_id: InstanceId) {
        self.projectiles.remove(&instance_id);
        logger::log(&format!("üóëÔ∏è Unregistered projectile: {:?}", instance_id));
    }

    /// Cleanup destroyed projectiles (call every frame)
    ///
    /// Removes projectiles that were queue_free()'d by Godot.
    pub fn cleanup_destroyed(&mut self) {
        self.projectiles.retain(|id, proj| {
            let is_valid = proj.is_instance_valid();
            if !is_valid {
                logger::log(&format!("üóëÔ∏è Cleanup destroyed projectile: {:?}", id));
            }
            is_valid
        });
    }
}
