//! Chunk-based NavMesh Building (ADR-006: Procgen World)
//!
//! –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è runtime baking NavigationMesh –∏–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏.
//! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è chunk streaming world ‚Äî –∫–∞–∂–¥—ã–π chunk –∑–∞–ø–µ–∫–∞–µ—Ç —Å–≤–æ–π NavMesh.
//!
//! ## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
//! - `NavigationMeshSourceGeometryData3D`: –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è (vertices/faces)
//! - `NavigationServer3D::bake_from_source_geometry_data()`: runtime baking
//! - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π `NavigationMesh` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ `NavigationRegion3D`
//!
//! ## –ü–æ—á–µ–º—É –ù–ï bake_navigation_mesh():
//! - –¢—Ä–µ–±—É–µ—Ç StaticBody3D/CSG nodes –≤ SceneTree (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏)
//! - –î–ª—è –ø—Ä–æ—Ü–≥–µ–Ω–∞ –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
//! - Chunk streaming —Ç—Ä–µ–±—É–µ—Ç runtime generation –ë–ï–ó –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö nodes

use godot::prelude::*;
use godot::classes::{
    NavigationMesh, NavigationServer3D, NavigationMeshSourceGeometryData3D,
};

/// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã NavMesh baking (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è NavigationMesh —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
/// –í–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ pathfinding –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
#[derive(Debug, Clone)]
pub struct NavMeshBakingParams {
    /// –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏ (–º–µ–Ω—å—à–µ = —Ç–æ—á–Ω–µ–µ, –Ω–æ –¥–æ—Ä–æ–∂–µ), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.25–º
    pub cell_size: f32,
    /// –í—ã—Å–æ—Ç–∞ —è—á–µ–π–∫–∏ (–º–µ–Ω—å—à–µ = —Ç–æ—á–Ω–µ–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 0.25–º
    pub cell_height: f32,
    /// –í—ã—Å–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏), —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 1.8–º
    pub agent_height: f32,
    /// –†–∞–¥–∏—É—Å –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è obstacle avoidance), —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 0.5–º
    pub agent_radius: f32,
    /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ–¥—ä—ë–º–∞ (–ª–µ—Å—Ç–Ω–∏—Ü—ã, —Å—Ç—É–ø–µ–Ω–∏), —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ 0.5–º
    pub agent_max_climb: f32,
    /// AABB –¥–ª—è baking ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NavMesh
    pub baking_aabb: godot::builtin::Aabb,
}

impl Default for NavMeshBakingParams {
    fn default() -> Self {
        Self {
            cell_size: 0.25,
            cell_height: 0.25,
            agent_height: 1.8,
            agent_radius: 0.5,
            agent_max_climb: 0.5,
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 400x400–º –ø–ª–æ—Å–∫–æ—Å—Ç—å (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            baking_aabb: godot::builtin::Aabb {
                position: Vector3::new(-200.0, -1.0, -200.0),
                size: Vector3::new(400.0, 2.0, 400.0),
            },
        }
    }
}

/// –ó–∞–ø–µ—á—å NavigationMesh –∏–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (runtime baking)
///
/// ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
/// - `vertices`: —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–∫–∞–∂–¥—ã–µ 3 –≤–µ—Ä—à–∏–Ω—ã = 1 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, clockwise winding)
/// - `params`: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã baking –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (cell size, agent —Ä–∞–∑–º–µ—Ä—ã, AABB)
///
/// ## –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
/// - `Gd<NavigationMesh>`: –≥–æ—Ç–æ–≤—ã–π NavMesh –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ NavigationRegion3D
///
/// ## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```rust
/// let vertices = generate_flat_plane_geometry(400.0, 400.0);
/// let params = NavMeshBakingParams::default();
/// let nav_mesh = bake_navmesh_from_geometry(&vertices, &params);
///
/// let mut nav_region = NavigationRegion3D::new_alloc();
/// nav_region.set_navigation_mesh(&nav_mesh);
/// ```
///
/// ## –î–ª—è chunk streaming:
/// ```rust
/// // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è chunk –Ω–∞–≤–º–µ—à–∞ (32x32–º)
/// let chunk_vertices = generate_chunk_geometry(chunk_coord, world_seed);
/// let mut params = NavMeshBakingParams::default();
/// params.baking_aabb = Aabb {
///     position: Vector3::new(chunk_x * 32.0, -1.0, chunk_z * 32.0),
///     size: Vector3::new(32.0, 2.0, 32.0),
/// };
/// let chunk_navmesh = bake_navmesh_from_geometry(&chunk_vertices, &params);
/// ```
pub fn bake_navmesh_from_geometry(
    vertices: &godot::builtin::PackedVector3Array,
    params: &NavMeshBakingParams,
) -> Gd<NavigationMesh> {
    // 1. –°–æ–∑–¥–∞—Ç—å NavigationMesh —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let mut nav_mesh = NavigationMesh::new_gd();
    nav_mesh.set_cell_size(params.cell_size);
    nav_mesh.set_cell_height(params.cell_height);
    nav_mesh.set_agent_height(params.agent_height);
    nav_mesh.set_agent_radius(params.agent_radius);
    nav_mesh.set_agent_max_climb(params.agent_max_climb);

    // –ö–†–ò–¢–ò–ß–ù–û: AABB –¥–ª—è baking ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å
    nav_mesh.set_filter_baking_aabb(params.baking_aabb);

    // 2. –°–æ–∑–¥–∞—Ç—å source geometry data
    let mut source_geometry = NavigationMeshSourceGeometryData3D::new_gd();
    source_geometry.add_faces(vertices, Transform3D::IDENTITY);

    voidrun_simulation::log(&format!(
        "üìê NavMesh baking: {} vertices ‚Üí NavigationServer3D",
        vertices.len()
    ));

    // 3. Bake NavMesh –∏–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    let mut nav_server = NavigationServer3D::singleton();
    nav_server.bake_from_source_geometry_data(&nav_mesh, &source_geometry);

    // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    let vertex_count = nav_mesh.get_vertices().len();
    let polygon_count = nav_mesh.get_polygon_count();
    voidrun_simulation::log(&format!(
        "‚úÖ NavMesh baked: {} vertices, {} polygons",
        vertex_count, polygon_count
    ));

    if polygon_count == 0 {
        voidrun_simulation::log("‚ùå WARNING: NavMesh has 0 polygons! Check geometry/parameters");
    }

    nav_mesh
}

/// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π flat plane –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
///
/// –°–æ–∑–¥–∞—ë—Ç 2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (quad) –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–º `width x height` –º–µ—Ç—Ä–æ–≤.
///
/// ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
/// - `width`: —à–∏—Ä–∏–Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ –æ—Å–∏ X (–º–µ—Ç—Ä—ã)
/// - `height`: –≤—ã—Å–æ—Ç–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –ø–æ –æ—Å–∏ Z (–º–µ—Ç—Ä—ã)
///
/// ## –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
/// - `PackedVector3Array`: 6 –≤–µ—Ä—à–∏–Ω (2 —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, clockwise winding)
pub fn generate_flat_plane_geometry(width: f32, height: f32) -> godot::builtin::PackedVector3Array {
    let mut vertices = godot::builtin::PackedVector3Array::new();

    let half_w = width / 2.0;
    let half_h = height / 2.0;

    // Triangle 1 (clockwise from top):
    vertices.push(Vector3::new(-half_w, 0.0, -half_h)); // top-left
    vertices.push(Vector3::new(half_w, 0.0, -half_h)); // top-right
    vertices.push(Vector3::new(half_w, 0.0, half_h)); // bottom-right

    // Triangle 2:
    vertices.push(Vector3::new(-half_w, 0.0, -half_h)); // top-left
    vertices.push(Vector3::new(half_w, 0.0, half_h)); // bottom-right
    vertices.push(Vector3::new(-half_w, 0.0, half_h)); // bottom-left

    vertices
}

/// –°–æ–∑–¥–∞—Ç—å test NavigationRegion3D —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ (SceneTree-based baking)
///
/// **–í–ê–ñ–ù–û:** –≠—Ç–æ TEST —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ NavMesh –∑–∞–ø–µ–∫–∞–µ—Ç—Å—è –∏–∑ StaticBody3D/CollisionShape3D.
/// –î–ª—è production chunk building –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ chunk data.
///
/// ## –ß—Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è:
/// - NavigationRegion3D (—Ä–æ–¥–∏—Ç–µ–ª—å)
/// - Ground: StaticBody3D —Å BoxShape3D (400x1x400–º –∑–µ–º–ª—è)
/// - Obstacles: 4 StaticBody3D –±–æ–∫—Å–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è)
/// - Visual meshes (–∑–µ–ª—ë–Ω–∞—è –∑–µ–º–ª—è, –∫—Ä–∞—Å–Ω—ã–µ –±–æ–∫—Å—ã)
///
/// ## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
/// - `params`: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã NavMesh baking
///
/// ## –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
/// - `Gd<NavigationRegion3D>`: –≥–æ—Ç–æ–≤—ã–π region —Å NavMesh settings (baking –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π!)
///
/// ## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```rust
/// let params = NavMeshBakingParams::default();
/// let mut nav_region = create_test_navigation_region_with_obstacles(&params);
///
/// // –î–æ–±–∞–≤–∏—Ç—å –≤ SceneTree –ü–ï–†–ï–î baking
/// parent_node.add_child(&nav_region.clone().upcast::<Node>());
///
/// // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π baking
/// nav_region.bake_navigation_mesh();
///
/// // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ~2 —Å–µ–∫ –∏–ª–∏ signal "baking_finished"
/// ```
pub fn create_test_navigation_region_with_obstacles(
    params: &NavMeshBakingParams,
) -> Gd<godot::classes::NavigationRegion3D> {
    use godot::classes::{
        NavigationRegion3D, StaticBody3D, CollisionShape3D, BoxShape3D,
        MeshInstance3D, PlaneMesh, BoxMesh, StandardMaterial3D, Mesh, Material, Node,
    };

    // 1. –°–æ–∑–¥–∞—Ç—å NavigationMesh —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let mut nav_mesh = NavigationMesh::new_gd();
    nav_mesh.set_cell_size(params.cell_size);
    nav_mesh.set_cell_height(params.cell_height);
    nav_mesh.set_agent_height(params.agent_height);
    nav_mesh.set_agent_radius(params.agent_radius);
    nav_mesh.set_agent_max_climb(params.agent_max_climb);
    nav_mesh.set_filter_baking_aabb(params.baking_aabb);

    // 2. –°–æ–∑–¥–∞—Ç—å NavigationRegion3D
    let mut nav_region = NavigationRegion3D::new_alloc();
    nav_region.set_navigation_mesh(&nav_mesh);
    nav_region.set_name("NavRegion_Test");

    // 3. –°–æ–∑–¥–∞—Ç—å StaticBody3D –∫–∞–∫ –∑–µ–º–ª—é (400x400–º, collision enabled)
    let mut ground_body = StaticBody3D::new_alloc();
    ground_body.set_name("Ground");

    // CollisionShape3D –¥–ª—è –∑–µ–º–ª–∏ (–ø–ª–æ—Å–∫–∏–π box 400x1x400–º)
    let mut ground_collision = CollisionShape3D::new_alloc();
    let mut ground_shape = BoxShape3D::new_gd();
    ground_shape.set_size(Vector3::new(60.0, 1.0, 60.0));
    ground_collision.set_shape(&ground_shape.upcast::<godot::classes::Shape3D>());
    ground_collision.set_position(Vector3::new(0.0, -0.5, 0.0)); // –û–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –ø–æ–ª–º–µ—Ç—Ä–∞
    ground_body.add_child(&ground_collision.upcast::<Node>());

    // Visual mesh –¥–ª—è –∑–µ–º–ª–∏ (–∑–µ–ª—ë–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å)
    let mut ground_visual = MeshInstance3D::new_alloc();
    ground_visual.set_name("GroundVisual");
    let mut plane = PlaneMesh::new_gd();
    plane.set_size(Vector2::new(60.0, 60.0));
    ground_visual.set_mesh(&plane.upcast::<Mesh>());

    let mut material = StandardMaterial3D::new_gd();
    material.set_albedo(Color::from_rgb(0.3, 0.5, 0.3));
    ground_visual.set_surface_override_material(0, &material.upcast::<Material>());
    ground_body.add_child(&ground_visual.upcast::<Node>());

    nav_region.add_child(&ground_body.upcast::<Node>());

    // 4. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ StaticBody3D –±–æ–∫—Å–æ–≤ –∫–∞–∫ obstacles (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
    let obstacles = [
        // ("Obstacle1", Vector3::new(10.0, 0.0, 10.0), Vector3::new(2.0, 4.0, 2.0)),
        // ("Obstacle2", Vector3::new(-15.0, 0.0, 5.0), Vector3::new(3.0, 4.5, 3.0)),
        // ("Obstacle3", Vector3::new(20.0, 0.0, -10.0), Vector3::new(1.5, 4.0, 1.5)),
        // ("Obstacle4", Vector3::new(-10.0, 0.0, -15.0), Vector3::new(4.0, 4.0, 2.0)),
        ("Obstacle5", Vector3::new(-0.0, 0.0, -0.0), Vector3::new(4.0, 4.0, 4.0)),

    ];

    for (name, pos, size) in obstacles.iter() {
        let mut obstacle = StaticBody3D::new_alloc();
        obstacle.set_name(*name);
        obstacle.set_position(*pos);

        // Collision layers: Environment (layer 3)
        // Obstacles –∫–æ–ª–ª–∏–¥–∏—Ä—É—é—Ç —Å actors (layer 2) –∏ projectiles (layer 4)
        obstacle.set_collision_layer(crate::collision_layers::COLLISION_LAYER_ENVIRONMENT);
        obstacle.set_collision_mask(
            crate::collision_layers::COLLISION_LAYER_ACTORS
                | crate::collision_layers::COLLISION_LAYER_PROJECTILES,
        );

        // CollisionShape3D
        let mut collision = CollisionShape3D::new_alloc();
        let mut shape = BoxShape3D::new_gd();
        shape.set_size(*size);
        collision.set_shape(&shape.upcast::<godot::classes::Shape3D>());
        obstacle.add_child(&collision.upcast::<Node>());

        // Visual mesh (–∫—Ä–∞—Å–Ω—ã–π box)
        let mut visual = MeshInstance3D::new_alloc();
        let mut box_mesh = BoxMesh::new_gd();
        box_mesh.set_size(*size);
        visual.set_mesh(&box_mesh.upcast::<Mesh>());

        let mut mat = StandardMaterial3D::new_gd();
        mat.set_albedo(Color::from_rgb(0.8, 0.2, 0.2)); // –ö—Ä–∞—Å–Ω—ã–µ obstacles
        visual.set_surface_override_material(0, &mat.upcast::<Material>());
        obstacle.add_child(&visual.upcast::<Node>());

        nav_region.add_child(&obstacle.upcast::<Node>());
    }

    voidrun_simulation::log("üèóÔ∏è Test NavigationRegion3D created with ground + 4 obstacles");

    nav_region
}
