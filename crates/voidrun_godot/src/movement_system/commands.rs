//! Movement command processing (MovementCommand ‚Üí NavigationAgent3D).

use crate::shared::VisualRegistry;
use crate::los_helpers::check_line_of_sight;
use bevy::prelude::*;
use godot::classes::{BoxMesh, CharacterBody3D, Material, MeshInstance3D, NavigationAgent3D, StandardMaterial3D};
use godot::prelude::*;
use voidrun_simulation::{MovementCommand, NavigationState};
use voidrun_simulation::logger;

/// Adjust desired distance based on LOS check (stateful iteration).
///
/// Algorithm:
/// 1. If current_distance is None ‚Üí initialize from max_distance
/// 2. Check LOS at current actor position to target
/// 3. If LOS clear ‚Üí keep current_distance (–Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ)
/// 4. If LOS blocked ‚Üí decrease current_distance by 2m
/// 5. If distance < 2m ‚Üí clamp to 2m (minimum, wait state)
///
/// NavigationAgent will pathfind to closer position, which may clear LOS.
/// Distance iteratively decreases each frame until LOS clears.
///
/// # Parameters
/// - `from_entity`: Shooter/follower entity
/// - `to_entity`: Target entity
/// - `current_distance`: Current adjusted distance (from NavigationState)
/// - `max_distance`: Maximum distance (from weapon range, for initialization)
/// - `visuals`: VisualRegistry for Godot nodes
/// - `scene_root`: SceneRoot for raycast
///
/// # Returns
/// - Adjusted desired_distance for NavigationAgent
pub(super) fn adjust_distance_for_los(
    from_entity: Entity,
    to_entity: Entity,
    current_distance: Option<f32>,
    max_distance: f32,
    visuals: &NonSend<VisualRegistry>,
    scene_root: &NonSend<crate::shared::SceneRoot>,
) -> f32 {
    const MIN_DISTANCE: f32 = 2.0; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (–º–µ—Ç—Ä—ã)
    const DISTANCE_STEP: f32 = 2.0; // –®–∞–≥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ (–º–µ—Ç—Ä—ã)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º current_distance –µ—Å–ª–∏ None
    let current = current_distance.unwrap_or(max_distance);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º LOS
    match check_line_of_sight(from_entity, to_entity, visuals, scene_root) {
        Some(true) => {
            // LOS clear ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é distance (–Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º)
            current
        }
        Some(false) => {
            // LOS blocked ‚Üí –ø–æ–¥—Ö–æ–¥–∏–º –±–ª–∏–∂–µ (—É–º–µ–Ω—å—à–∞–µ–º distance)
            let new_distance = (current - DISTANCE_STEP).max(MIN_DISTANCE);

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ distance –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if (new_distance - current).abs() > 0.1 {
                logger::log(&format!(
                    "üîÑ LOS blocked: {:?} ‚Üí {:?}, reducing distance {:.1}m ‚Üí {:.1}m",
                    from_entity, to_entity, current, new_distance
                ));
            }

            new_distance
        }
        None => {
            // Raycast failed ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º current distance (fallback)
            current
        }
    }
}

/// Debug: —Å–æ–∑–¥–∞—ë—Ç –∫—Ä–∞—Å–Ω—ã–π box marker –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
#[allow(dead_code)]
pub(super) fn spawn_debug_marker(position: Vector3, scene_root: &mut Gd<Node>) {
    let mut marker = MeshInstance3D::new_alloc();

    // –ö—Ä–∞—Å–Ω—ã–π box mesh
    let mut box_mesh = BoxMesh::new_gd();
    box_mesh.set_size(Vector3::new(0.5, 0.5, 0.5));
    marker.set_mesh(&box_mesh.upcast::<BoxMesh>());

    // –ö—Ä–∞—Å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    let mut material = StandardMaterial3D::new_gd();
    material.set_albedo(Color::from_rgb(1.0, 0.0, 0.0)); // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
    marker.set_surface_override_material(0, &material.upcast::<Material>());

    marker.set_position(position);
    scene_root.add_child(&marker.upcast::<Node>());
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ MovementCommand ‚Üí NavigationAgent3D target
///
/// –ö–†–ò–¢–ò–ß–ù–û: set_target_position() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ Changed<MovementCommand>
/// NavigationState.is_target_reached —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–º MovementCommand.
pub fn process_movement_commands_main_thread(
    mut query: Query<
        (
            Entity,
            &MovementCommand,
            &mut NavigationState,
            Option<&voidrun_simulation::combat::WeaponStats>,
        ),
        Changed<MovementCommand>,
    >,
    visuals: NonSend<VisualRegistry>,
) {
    for (entity, command, mut nav_state, weapon_opt) in query.iter_mut() {
        let Some(actor_node) = visuals.visuals.get(&entity) else {
            continue;
        };

        let Some(mut nav_agent) =
            actor_node.try_get_node_as::<NavigationAgent3D>("NavigationAgent3D")
        else {
            continue;
        };

        match command {
            MovementCommand::Idle => {
                // Idle ‚Äî –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
                nav_agent.set_target_position(actor_node.get_position());
            }
            MovementCommand::MoveToPosition { target } => {
                // –ù–æ–≤–∞—è —Ü–µ–ª—å ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ (–Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å event –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏)
                nav_state.is_target_reached = false;

                let target_vec = Vector3::new(target.x, target.y, target.z);
                nav_agent.set_target_position(target_vec);
                nav_agent.set_target_desired_distance(0.1);

                logger::log(&format!(
                    "Entity {:?}: new MoveToPosition target {:?}, reset reached flag",
                    entity, target
                ));
            }
            MovementCommand::FollowEntity { target } => {
                // –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ entity ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ —Å–º–µ–Ω–µ target –ò–õ–ò –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                // TODO: –í–∞—Ä–∏–∞–Ω—Ç B (distance threshold) ‚Äî —Ç—Ä–µ–±—É–µ—Ç query target entity position
                if nav_state.last_follow_target != Some(*target) {
                    nav_state.is_target_reached = false;
                    nav_state.last_follow_target = Some(*target);
                    nav_state.current_follow_distance = None; // –°–±—Ä–æ—Å distance –ø—Ä–∏ —Å–º–µ–Ω–µ target

                    logger::log(&format!(
                        "Entity {:?}: new FollowEntity target {:?}, reset reached flag + distance",
                        entity, target
                    ));
                }

                let Some(target_node) = visuals.visuals.get(&target) else {
                    continue;
                };

                let target_pos = target_node.get_position();
                nav_agent.set_target_position(target_pos);

                // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –æ—Ä—É–∂–∏—è:
                // - Melee (attack_radius > 0): –ø–æ–¥—Ö–æ–¥–∏–º –≤–ø–ª–æ—Ç–Ω—É—é (–ë–ï–ó –±—É—Ñ–µ—Ä–∞)
                // - Ranged (range > 0): –¥–µ—Ä–∂–∏–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (—Å –±—É—Ñ–µ—Ä–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
                const RANGED_STOP_BUFFER: f32 = 2.0; // –ë—É—Ñ–µ—Ä –¥–ª—è ranged –æ—Ä—É–∂–∏—è

                let (stop_distance, weapon_type) = if let Some(weapon) = weapon_opt {
                    if weapon.attack_radius > 0.0 {
                        // Melee weapon ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º attack_radius –ë–ï–ó –±—É—Ñ–µ—Ä–∞
                        (weapon.attack_radius, "melee")
                    } else {
                        // Ranged weapon ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º range —Å –±—É—Ñ–µ—Ä–æ–º
                        ((weapon.range - RANGED_STOP_BUFFER).max(0.5), "ranged")
                    }
                } else {
                    // Fallback –¥–ª—è –∞–∫—Ç–æ—Ä–æ–≤ –±–µ–∑ –æ—Ä—É–∂–∏—è
                    (15.0, "default")
                };

                nav_agent.set_target_desired_distance(stop_distance);

                logger::log(&format!(
                    "Entity {:?}: FollowEntity target {:?} (stop at {:.1}m, type: {})",
                    entity, target_pos, stop_distance, weapon_type
                ));
            }
            MovementCommand::RetreatFrom { target } => {
                // RetreatFrom ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º NavigationAgent (–ø—Ä—è–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ velocity)
                // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è consistency
                nav_state.is_target_reached = false;

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NavigationAgent target –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é (–æ—Ç–∫–ª—é—á–∞–µ–º pathfinding)
                nav_agent.set_target_position(actor_node.get_position());

                logger::log(&format!(
                    "Entity {:?}: RetreatFrom {:?} (direct velocity control)",
                    entity, target
                ));
            }
            MovementCommand::Stop => {
                // Stop ‚Äî –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é)
                nav_agent.set_target_position(actor_node.get_position());
            }
        }
    }
}
