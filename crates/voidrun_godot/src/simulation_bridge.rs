use godot::prelude::*;
use godot::classes::{
    Node3D, INode3D, MeshInstance3D, PlaneMesh, SphereMesh,
    StandardMaterial3D, DirectionalLight3D,
    Node, Mesh, Material, CpuParticles3D,
    NavigationRegion3D,
    light_3d::Param as LightParam,
    base_material_3d::{ShadingMode as BaseMaterial3DShading, Flags as BaseMaterial3DFlags},
    cpu_particles_3d::{EmissionShape, Parameter as CpuParam},
};
use voidrun_simulation::*;
use voidrun_simulation::combat::Weapon;
use crate::camera::rts_camera::RTSCamera3D;
use crate::systems::{VisualRegistry, AttachmentRegistry, SceneRoot, VisionTracking};
use voidrun_simulation::ai::{AIState, SpottedEnemies};
use bevy::ecs::schedule::IntoScheduleConfigs;
use godot::classes::Timer;

/// –ú–æ—Å—Ç –º–µ–∂–¥—É Godot –∏ Rust ECS —Å–∏–º—É–ª—è—Ü–∏–µ–π (100% Rust, no GDScript)
///
/// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
/// - –°–æ–∑–¥–∞—ë—Ç –≤—Å—é 3D —Å—Ü–µ–Ω—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –≤ ready()
/// - –ö–∞–∂–¥—ã–π frame: ECS update ‚Üí sync transforms ‚Üí update health bars
#[derive(GodotClass)]
#[class(base=Node3D)]
pub struct SimulationBridge {
    base: Base<Node3D>,

    /// Bevy ECS App (—Å–∏–º—É–ª—è—Ü–∏—è + NonSend visual registries)
    simulation: Option<bevy::app::App>,
}

#[godot_api]
impl INode3D for SimulationBridge {
    fn init(base: Base<Node3D>) -> Self {
        Self {
            base,
            simulation: None,
        }
    }

    fn ready(&mut self) {
        GodotLogger::clear_log_file();
        voidrun_simulation::set_logger(Box::new(GodotLogger));
        voidrun_simulation::set_log_level(LogLevel::Error);
        voidrun_simulation::log("SimulationBridge ready - building 3D scene in Rust");

        // 1. –°–æ–∑–¥–∞—ë–º navigation region + ground
        self.create_navigation_region();

        // 2. –°–æ–∑–¥–∞—ë–º lights
        self.create_lights();

        // 3. –°–æ–∑–¥–∞—ë–º camera
        self.create_camera();

        // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ECS —Å–∏–º—É–ª—è—Ü–∏—é
        let mut app = create_headless_app(42);
        app.add_plugins(SimulationPlugin);

        // 4.1 –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º NonSend resources (main thread only)
        app.insert_non_send_resource(VisualRegistry::default());
        app.insert_non_send_resource(AttachmentRegistry::default());
        app.insert_non_send_resource(VisionTracking::default());
        app.insert_non_send_resource(SceneRoot {
            node: self.base().clone().upcast::<Node3D>(),
        });

        // 4.2 –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º static queues –¥–ª—è Godot ‚Üí ECS events
        crate::projectile::init_projectile_hit_queue();

        // 4.3 –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º visual sync systems (_main_thread = Godot API)
        use crate::systems::{
            spawn_actor_visuals_main_thread,
            sync_health_labels_main_thread,
            sync_stamina_labels_main_thread,
            sync_ai_state_labels_main_thread,
            disable_collision_on_death_main_thread,
            despawn_actor_visuals_main_thread,
            // –£–î–ê–õ–ï–ù–û: sync_transforms_main_thread (ADR-005)
            attach_prefabs_main_thread,
            detach_prefabs_main_thread,
            poll_vision_cones_main_thread,
            weapon_aim_main_thread,
            process_weapon_fire_intents_main_thread,
            weapon_fire_main_thread,
            process_godot_projectile_hits,
            process_movement_commands_main_thread,
            apply_navigation_velocity_main_thread,
            // –£–î–ê–õ–ï–ù–û: sync_strategic_position_from_godot (–∑–∞–º–µ–Ω—ë–Ω –Ω–∞ event-driven)
        };


        // 3. Sync (Changed<T> ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–æ–≤) + Vision polling + Weapon systems + Movement
        app.add_systems(
            bevy::prelude::Update,
            (
                spawn_actor_visuals_main_thread,
                attach_prefabs_main_thread,
                detach_prefabs_main_thread,
                // –£–î–ê–õ–ï–ù–û: sync_strategic_position_from_godot (–∑–∞–º–µ–Ω—ë–Ω –Ω–∞ event-driven –≤ apply_navigation_velocity)
                poll_vision_cones_main_thread,    // VisionCone ‚Üí GodotAIEvent
                process_movement_commands_main_thread, // MovementCommand ‚Üí NavigationAgent3D
                apply_navigation_velocity_main_thread, // NavigationAgent ‚Üí CharacterBody + PositionChanged event
                weapon_aim_main_thread,           // Aim RightHand at target
                process_weapon_fire_intents_main_thread, // WeaponFireIntent ‚Üí tactical validation ‚Üí WeaponFired
                weapon_fire_main_thread,          // WeaponFired ‚Üí spawn GodotProjectile
                                                  // Projectile physics ‚Üí GodotProjectile::_physics_process
                process_godot_projectile_hits,    // Godot queue ‚Üí ECS ProjectileHit events
                sync_health_labels_main_thread,
                sync_stamina_labels_main_thread,
                sync_ai_state_labels_main_thread,
                disable_collision_on_death_main_thread, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ collision + gray + DespawnAfter
                despawn_actor_visuals_main_thread, // –£–¥–∞–ª–µ–Ω–∏–µ Godot nodes –¥–ª—è despawned entities
            ).chain(),
        );

        // 5. –°–æ–∑–¥–∞—ë–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞ NPC (—á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥)
        app.world_mut().spawn(SpawnNPCsAfter { spawn_time: 5.0 });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞
        app.add_systems(bevy::prelude::Update, delayed_npc_spawn_system);

        self.simulation = Some(app);

        voidrun_simulation::log("Scene ready: NPCs will spawn after 5 sec (delayed spawn)");
    }

    fn process(&mut self, delta: f64) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        if let Some(app) = &mut self.simulation {
            // –ü–µ—Ä–µ–¥–∞—ë–º delta time –≤ Bevy (–¥–ª—è movement system)
            app.world_mut().insert_resource(crate::systems::GodotDeltaTime(delta as f32));
            app.update(); // ECS systems –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è, –≤–∫–ª—é—á–∞—è attach/detach_prefabs_main_thread
        }

        // Debug: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º AI states (—Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
        if let Some(app) = &mut self.simulation {
            static mut DEBUG_TIMER: f32 = 0.0;
            unsafe {
                DEBUG_TIMER += delta as f32;
                if DEBUG_TIMER >= 1.0 {
                    DEBUG_TIMER = 0.0;

                    let world = app.world_mut();
                    let mut query = world.query::<(bevy::prelude::Entity, &AIState, &Actor, &Health, &Stamina)>();

                    for (entity, state, actor, health, stamina) in query.iter(world) {
                        voidrun_simulation::log(&format!("DEBUG: Entity {:?} (faction {}) HP:{}/{} Stamina:{:.0}/{:.0} state = {:?}",
                            entity, actor.faction_id, health.current, health.max, stamina.current, stamina.max, state));
                    }
                }
            }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º hit effects (DamageDealt —Å–æ–±—ã—Ç–∏—è)
        self.process_hit_effects();

        // Visual sync —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ ECS systems (_main_thread)
        // sync_health_labels_main_thread, sync_stamina_labels_main_thread, etc.
    }
}

#[godot_api]
impl SimulationBridge {
    /// –°–æ–∑–¥–∞—Ç—å NavigationRegion3D + NavMesh (baking –∏–∑ SceneTree children)
    ///
    /// TEST: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ NavMesh –∑–∞–ø–µ–∫–∞–µ—Ç—Å—è –∏–∑ StaticBody3D/CSGBox3D children,
    /// –∞ –Ω–µ –∏–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ chunk building).
    fn create_navigation_region(&mut self) {
        use crate::chunk_navmesh::{create_test_navigation_region_with_obstacles, NavMeshBakingParams};

        // 1. –°–æ–∑–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã NavMesh baking
        let mut params = NavMeshBakingParams::default();
        params.baking_aabb = godot::builtin::Aabb {
            position: Vector3::new(-200.0, -1.0, -200.0),
            size: Vector3::new(400.0, 10.0, 400.0), // –í—ã—Å–æ—Ç–∞ 10–º (–¥–ª—è –±–æ–∫—Å–æ–≤)
        };

        // 2. –°–æ–∑–¥–∞—ë–º NavigationRegion3D —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ obstacles —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
        let mut nav_region = create_test_navigation_region_with_obstacles(&params);

        // 3. –î–æ–±–∞–≤–ª—è–µ–º NavigationRegion3D –≤ —Å—Ü–µ–Ω—É –ü–ï–†–ï–î baking
        self.base_mut().add_child(&nav_region.clone().upcast::<Node>());

        voidrun_simulation::log("üîß Baking NavMesh from SceneTree (StaticBody3D children)...");

        // 4. Bake NavMesh –∏–∑ SceneTree children (–ö–†–ò–¢–ò–ß–ù–û: region –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ tree!)
        nav_region.bake_navigation_mesh(); // –ê–°–ò–ù–•–†–û–ù–ù–´–ô baking –∏–∑ children

        // 5. –°–æ–∑–¥–∞—ë–º Timer –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (baking –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        let mut timer = Timer::new_alloc();
        timer.set_wait_time(2.0); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞
        timer.set_one_shot(true);

        // –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ add_child, –ø–æ—Ç–æ–º connect –∏ start!
        self.base_mut().add_child(&timer.clone().upcast::<Node>());

        // Clone nav_region –¥–ª—è callback
        let nav_region_for_callback = nav_region.clone();

        // –°–æ–∑–¥–∞—ë–º callable –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
        let check_callback = Callable::from_fn("check_navmesh_bake", move |_args| {
            voidrun_simulation::log_error("‚è∞ Timer callback triggered!");

            let baked_mesh = nav_region_for_callback.get_navigation_mesh();
            if let Some(mesh) = baked_mesh {
                let vertex_count = mesh.get_vertices().len();
                let polygon_count = mesh.get_polygon_count();
                voidrun_simulation::log_error(&format!(
                    "‚úÖ NavMesh baked (after 2 sec): {} vertices, {} polygons",
                    vertex_count, polygon_count
                ));

                if polygon_count == 0 {
                    voidrun_simulation::log_error("‚ùå WARNING: NavMesh has 0 polygons! Check geometry/parameters");
                } else {
                    voidrun_simulation::log_error("üéâ NavMesh baking SUCCESS - physical objects detected!");
                }
            } else {
                voidrun_simulation::log_error("‚ùå ERROR: Failed to bake NavMesh!");
            }
            Variant::nil()
        });

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º timeout signal –∫ callable
        timer.connect("timeout", &check_callback);

        // –ó–∞–ø—É—Å–∫–∞–µ–º timer
        timer.start();

        voidrun_simulation::log_error("‚úÖ NavigationRegion3D ready, baking in progress (check in 2 sec)...");
    }

    /// –°–æ–∑–¥–∞—Ç—å lights (directional sun)
    fn create_lights(&mut self) {
        let mut light = DirectionalLight3D::new_alloc();
        light.set_rotation_degrees(Vector3::new(-45.0, 0.0, 0.0));
        light.set_param(LightParam::ENERGY, 1.0);

        self.base_mut().add_child(&light.upcast::<Node>());
    }

    /// –°–æ–∑–¥–∞—Ç—å RTS camera (WASD + mouse orbit + scroll zoom)
    fn create_camera(&mut self) {
        let mut camera = Gd::<RTSCamera3D>::from_init_fn(|base| {
            RTSCamera3D::init(base)
        });

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
        camera.set_position(Vector3::new(0.0, 5.0, 0.0));
        camera.set_rotation_degrees(Vector3::new(0.0, 0.0, 0.0));

        self.base_mut().add_child(&camera.upcast::<Node>());

        voidrun_simulation::log("RTSCamera3D added - use WASD, RMB drag, mouse wheel");
    }

    // ‚ùå REMOVED: create_npc_visual() ‚Äî —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º spawn_actor_visuals_main_thread() ECS —Å–∏—Å—Ç–µ–º—É
    // –°–º. crates/voidrun_godot/src/systems/visual_sync.rs

    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—ã —Å ECS state
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç DamageDealt —Å–æ–±—ã—Ç–∏—è –∏ —Å–ø–∞–≤–Ω–∏—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É–¥–∞—Ä–æ–≤
    fn process_hit_effects(&mut self) {
        use voidrun_simulation::combat::DamageDealt;

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è particles (–±–µ–∑ mutable borrow self)
        let positions: Vec<Vector3> = if let Some(app) = &mut self.simulation {
            let world = app.world();

            // –ß–∏—Ç–∞–µ–º –≤—Å–µ DamageDealt —Å–æ–±—ã—Ç–∏—è –∏–∑ —ç—Ç–æ–≥–æ —Ñ—Ä–µ–π–º–∞
            let damage_events = world.resource::<bevy::prelude::Events<DamageDealt>>();

            let events: Vec<DamageDealt> = damage_events
                .iter_current_update_events()
                .cloned()
                .collect();

            if !events.is_empty() {
                voidrun_simulation::log(&format!("DEBUG: Found {} damage events this frame", events.len()));
            }

            // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è particles
            events.iter()
                .filter_map(|event| {
                    world.get::<bevy::prelude::Transform>(event.target)
                        .map(|t| Vector3::new(t.translation.x, t.translation.y + 0.5, t.translation.z))
                })
                .collect()
        } else {
            Vec::new()
        };

        // –¢–µ–ø–µ—Ä—å —Å–ø–∞–≤–Ω–∏–º particles (–º–æ–∂–µ–º –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞—Ç—å self mutably)
        for pos in positions {
            voidrun_simulation::log(&format!("DEBUG: Spawning hit particles at {:?}", pos));
            self.spawn_hit_particles(pos);
        }
    }

    /// –°–ø–∞–≤–Ω–∏—Ç –∫—Ä–∞—Å–Ω—ã–µ particles –≤ —Ç–æ—á–∫–µ —É–¥–∞—Ä–∞
    fn spawn_hit_particles(&mut self, position: Vector3) {
        voidrun_simulation::log(&format!("DEBUG: Creating particles at position {:?}", position));

        let mut particles = CpuParticles3D::new_alloc();

        // Position
        particles.set_position(position);

        // Mesh –¥–ª—è —á–∞—Å—Ç–∏—Ü (–º–∞–ª–µ–Ω—å–∫–∏–µ —Å—Ñ–µ—Ä—ã)
        let mut sphere_mesh = SphereMesh::new_gd();
        sphere_mesh.set_radius(0.08);
        sphere_mesh.set_height(0.16);
        particles.set_mesh(&sphere_mesh.upcast::<Mesh>());

        // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å —Ü–≤–µ—Ç–æ–º (–ö–†–ò–¢–ò–ß–ù–û: vertex_color_use_as_albedo = true!)
        let mut material = StandardMaterial3D::new_gd();
        material.set_flag(BaseMaterial3DFlags::ALBEDO_FROM_VERTEX_COLOR, true);
        material.set_albedo(Color::from_rgb(1.0, 0.2, 0.2));
        material.set_shading_mode(BaseMaterial3DShading::UNSHADED); // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –±–µ–∑ —Ç–µ–Ω–µ–π
        particles.set_material_override(&material.upcast::<Material>());
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ emission
        particles.set_emitting(true);
        particles.set_one_shot(true);
        particles.set_explosiveness_ratio(1.0); // –í—Å–µ —á–∞—Å—Ç–∏—Ü—ã —Å—Ä–∞–∑—É
        particles.set_amount(30); // 30 —á–∞—Å—Ç–∏—Ü
        particles.set_lifetime(0.8); // 0.8 —Å–µ–∫—É–Ω–¥—ã –∂–∏–≤—É—Ç

        // –§–æ—Ä–º–∞ emission (sphere)
        particles.set_emission_shape(EmissionShape::SPHERE);
        particles.set_emission_sphere_radius(0.3);

        // –§–∏–∑–∏–∫–∞ —á–∞—Å—Ç–∏—Ü
        particles.set_direction(Vector3::new(0.0, 1.0, 0.0));
        particles.set_spread(60.0); // –£–≥–æ–ª —Ä–∞–∑–±—Ä–æ—Å–∞
        particles.set_param_min(CpuParam::INITIAL_LINEAR_VELOCITY, 3.0);
        particles.set_param_max(CpuParam::INITIAL_LINEAR_VELOCITY, 5.0);
        particles.set_gravity(Vector3::new(0.0, -9.8, 0.0));

        // –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü
        particles.set_param_min(CpuParam::SCALE, 0.15);
        particles.set_param_max(CpuParam::SCALE, 0.3);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
        self.base_mut().add_child(&particles.upcast::<Node>());

        voidrun_simulation::log("DEBUG: Particles spawned and added to scene");

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (–ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞)
        // TODO: –¥–æ–±–∞–≤–∏—Ç—å timer –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
    }

    // –£–î–ê–õ–ï–ù–û: sync_visuals() ‚Äî –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ECS systems:
    // - sync_health_labels_main_thread
    // - sync_stamina_labels_main_thread
    // - sync_ai_state_labels_main_thread
    // - sync_transforms_main_thread
}

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ä: –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∞–≤–Ω NPC
#[derive(bevy::prelude::Component, Debug)]
struct SpawnNPCsAfter {
    spawn_time: f32, // –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å–ø–∞–≤–Ω–∏—Ç—å
}

/// –°–∏—Å—Ç–µ–º–∞: –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∞–≤–Ω NPC
///
/// –ñ–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Å–ø–∞–≤–Ω–∏—Ç –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö NPC.
fn delayed_npc_spawn_system(
    mut commands: bevy::prelude::Commands,
    query: bevy::prelude::Query<(bevy::prelude::Entity, &SpawnNPCsAfter)>,
    time: bevy::prelude::Res<bevy::prelude::Time>,
) {
    let elapsed = time.elapsed_secs();

    for (entity, spawn_marker) in query.iter() {
        if elapsed >= spawn_marker.spawn_time {
            voidrun_simulation::log("‚è∞ Spawning NPCs (delayed spawn triggered)");

            // –°–ø–∞–≤–Ω–∏–º –≤—Å–µ—Ö NPC
            spawn_test_npc(&mut commands, (-25.0, 0.5, -5.0), 1, 100, 1);
            spawn_test_npc(&mut commands, (-16.0, 0.5, -7.0), 1, 100, 1);
            spawn_test_npc(&mut commands, (-18.0, 0.5, -5.0), 1, 100, 1);
            spawn_test_npc(&mut commands, (-5.0, 0.5, -7.0), 1, 100, 1);
            spawn_test_npc(&mut commands, (-7.0, 0.5, -5.0), 1, 100, 1);
            spawn_test_npc(&mut commands, (-4.0, 0.5, -7.0), 1, 100, 1);

            spawn_test_npc(&mut commands, (25.0, 0.5, -5.0), 2, 100, 1);
            spawn_test_npc(&mut commands, (3.0, 0.5, -7.0), 2, 100, 2);
            spawn_test_npc(&mut commands, (5.0, 0.5, -5.0), 2, 100, 1);
            spawn_test_npc(&mut commands, (16.0, 0.5, -7.0), 2, 100, 2);
            spawn_test_npc(&mut commands, (17.0, 0.5, -5.0), 2, 100, 1);
            spawn_test_npc(&mut commands, (18.0, 0.5, -7.0), 2, 100, 2);

            spawn_test_npc(&mut commands, (0.0, 0.5, 7.0), 3, 100, 1);
            spawn_test_npc(&mut commands, (2.0, 0.5, 8.0), 3, 100, 2);
            spawn_test_npc(&mut commands, (0.0, 0.5, 9.0), 3, 100, 1);
            spawn_test_npc(&mut commands, (2.0, 0.5, 8.0), 3, 100, 2);
            spawn_test_npc(&mut commands, (0.0, 0.5, 15.0), 3, 100, 1);
            spawn_test_npc(&mut commands, (2.0, 0.5, 18.0), 3, 100, 2);

            // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä (spawn —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω)
            commands.entity(entity).despawn();

            voidrun_simulation::log("‚úÖ NPCs spawned successfully");
        }
    }
}

/// –°–ø–∞–≤–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ NPC –≤ ECS world (ADR-005: StrategicPosition + PrefabPath)
fn spawn_test_npc(
    commands: &mut bevy::prelude::Commands,
    position: (f32, f32, f32), // World position (–±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ StrategicPosition)
    faction_id: u64,
    max_hp: u32,
    damage: u32,
) -> bevy::prelude::Entity {
    use bevy::prelude::Vec3;

    let world_pos = Vec3::new(position.0, position.1, position.2);
    let strategic_pos = StrategicPosition::from_world_position(world_pos);

    commands.spawn((
        Actor { faction_id },
        strategic_pos, // StrategicPosition (sync_strategic_position_from_godot –æ–±–Ω–æ–≤–∏—Ç –∏–∑ Godot)
        PrefabPath::new("res://actors/test_actor.tscn"), // Data-driven prefab path
        Health {
            current: max_hp,
            max: max_hp,
        },
        Stamina {
            current: 100.0,
            max: 100.0,
            regen_rate: 10.0, // 10 stamina/sec
        },
        Attacker {
            attack_cooldown: 1.0,
            cooldown_timer: 0.0,
            base_damage: damage,
            attack_radius: 2.0,
        },
        Weapon::default(), // Weapon system (pistol)
        MovementCommand::Idle, // Godot –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å
        NavigationState::default(), // –¢—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è navigation target (–¥–ª—è PositionChanged events)
        AIState::Idle,
        AIConfig {
            retreat_stamina_threshold: 0.2,  // Retreat –ø—Ä–∏ stamina < 20%
            retreat_health_threshold: 0.0,   // Retreat –ø—Ä–∏ HP < 10% (–±—ã–ª–æ 20%)
            retreat_duration: 1.5,            // –ë—ã—Å—Ç—Ä–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –±–æ–π
            patrol_direction_change_interval: 3.0, // –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        },
        SpottedEnemies::default(), // Godot VisionCone ‚Üí GodotAIEvent ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫
        Attachment {
            prefab_path: "res://actors/test_pistol.tscn".to_string(),
            attachment_point: "RightHand/WeaponAttachment".to_string(),
            attachment_type: AttachmentType::Weapon,
        },
    )).id()
}

struct GodotLogger;

impl LogPrinter for GodotLogger {
    fn log(&self, level: LogLevel, message: &str) {
        if level >= *voidrun_simulation::LOGGER_LEVEL.lock().unwrap() {
            self._log_message(level, message);
        }
    }
}

impl GodotLogger {
    fn clear_log_file() {
        let log_path = std::path::Path::new("../logs/game.log");
        if let Some(_parent) = log_path.parent() {
            let _ = std::fs::remove_file(log_path);
        }
    }

    fn _log_message(&self, level: LogLevel, message: &str) {
        use std::io::Write;
        if level == LogLevel::Error {
            godot_error!("[{}] {}", level.as_str(), message);
        } else {
            godot_print!("[{}] {}", level.as_str(), message);
        }

        // –ü–∏—à–µ–º –≤ —Ñ–∞–π–ª logs/game.log (append mode)
        // Godot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ godot/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ project root
        let log_path = std::path::Path::new("../logs/game.log");

        // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if let Some(parent) = log_path.parent() {
            let _ = std::fs::create_dir_all(parent);
        }

        match std::fs::OpenOptions::new()
            .create(true)
            .append(true)
            .open(log_path)
        {
            Ok(mut file) => {
                let _ = writeln!(file, "{}", message);
            }
            Err(e) => {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)
                static mut ERROR_LOGGED: bool = false;
                unsafe {
                    if !ERROR_LOGGED {
                        godot_error!("‚ùå Failed to open log file {:?}: {}", log_path, e);
                        ERROR_LOGGED = true;
                    }
                }
            }
        }
    }
}