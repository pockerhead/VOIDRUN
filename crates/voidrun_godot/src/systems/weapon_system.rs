//! Weapon system - Godot –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (aim, fire, projectiles)
//!
//! Architecture (ADR-005):
//! - ECS: Weapon state (cooldown, fire decisions) ‚Üí WeaponFired events
//! - Godot: Aim execution (bone rotation), Projectile spawn + physics
//! - Events: WeaponFired (ECS‚ÜíGodot), ProjectileHit (Godot‚ÜíECS)

use bevy::prelude::*;
use godot::prelude::*;
use godot::classes::{Node3D, SphereMesh, StandardMaterial3D, Mesh, Material, CollisionShape3D, SphereShape3D, Node, ICharacterBody3D};
use voidrun_simulation::*;
use voidrun_simulation::combat::{WeaponFired, WeaponFireIntent, AttackType, MeleeAttackState, WeaponStats};
use voidrun_simulation::ai::{GodotAIEvent, SpottedEnemies};
use crate::systems::VisualRegistry;
use crate::actor_utils::{actors_facing_each_other, angles};

// ============================================================================
// Systems: Weapon Aim + Fire
// ============================================================================

/// System: Dynamic target switching (SlowUpdate schedule, 0.3 Hz)
///
/// –î–ª—è –í–°–ï–• –∞–∫—Ç–æ—Ä–æ–≤ –≤ AIState::Combat:
/// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –í–ò–î–ò–ú–û–ì–û –≤—Ä–∞–≥–∞ –∏–∑ SpottedEnemies (VisionCone + LOS raycast)
/// - –ï—Å–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –≤—Ä–∞–≥ ‚â† —Ç–µ–∫—É—â–∏–π target ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç target
///
/// **–†–µ–∑—É–ª—å—Ç–∞—Ç:** AI –≤—Å–µ–≥–¥–∞ –∞—Ç–∞–∫—É–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –≤—Ä–∞–≥–∞ (dynamic target prioritization)
///
/// **Schedule:** SlowUpdate (0.3 Hz = ~3 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
/// - –≠–∫–æ–Ω–æ–º–∏—è CPU (–Ω–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π frame)
/// - –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ AI (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ ~0.3—Å)
/// - –ò–∑–±–µ–≥–∞–µ–º "perfect play" —ç—Ñ—Ñ–µ–∫—Ç (instant target switching)
///
/// –í–ê–ñ–ù–û: –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç WeaponFireIntent events (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
pub fn update_combat_targets_main_thread(
    mut actors: Query<(Entity, &Actor, &mut ai::AIState, &ai::SpottedEnemies), With<Actor>>,
    all_actors: Query<&Actor>,
    visuals: NonSend<VisualRegistry>,
    scene_root: NonSend<crate::systems::SceneRoot>,
) {

    // –ü–æ–ª—É—á–∞–µ–º PhysicsDirectSpaceState3D –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–æ—Ä–æ–≤
    let world = scene_root.node.get_world_3d();
    let Some(mut world) = world else {
        return;
    };

    let space = world.get_direct_space_state();
    let Some(mut space) = space else {
        return;
    };

    for (entity, actor, mut ai_state, spotted_enemies) in actors.iter_mut() {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Combat state
        let ai::AIState::Combat { target: current_target } = ai_state.as_ref() else {
            continue;
        };

        // –ü–æ–ª—É—á–∞–µ–º shooter node –¥–ª—è distance calculation
        let Some(shooter_node) = visuals.visuals.get(&entity) else {
            continue;
        };

        let shooter_pos = shooter_node.get_global_position();
        let shooter_eye = shooter_pos + Vector3::new(0.0, 0.8, 0.0); // Eye level

        // –ò—â–µ–º –ë–õ–ò–ñ–ê–ô–®–ï–ì–û –í–ò–î–ò–ú–û–ì–û –≤—Ä–∞–≥–∞ –∏–∑ SpottedEnemies
        let mut closest_visible_enemy: Option<(Entity, f32)> = None;

        for &enemy_entity in &spotted_enemies.enemies {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–∞–≥ –∂–∏–≤ (–µ—Å—Ç—å –≤ actors)
            let Ok(enemy_actor) = all_actors.get(enemy_entity) else {
                continue;
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º faction (—Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–∏)
            if enemy_actor.faction_id == actor.faction_id {
                continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º Godot node –¥–ª—è distance + LOS check
            let Some(enemy_node) = visuals.visuals.get(&enemy_entity) else {
                continue;
            };

            let enemy_pos = enemy_node.get_global_position();
            let distance_to_enemy = (enemy_pos - shooter_pos).length();

            // ‚úÖ LOS CHECK: raycast –æ—Ç shooter –∫ enemy (eye-level)
            let enemy_eye = enemy_pos + Vector3::new(0.0, 0.8, 0.0);

            let query_params = godot::classes::PhysicsRayQueryParameters3D::create(shooter_eye, enemy_eye);
            let Some(mut query) = query_params else {
                continue;
            };

            query.set_collision_mask(crate::collision_layers::COLLISION_MASK_RAYCAST_LOS);
            let empty_array = godot::prelude::Array::new();
            query.set_exclude(&empty_array);

            let result = space.intersect_ray(&query);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç raycast
            if result.is_empty() {
                // –ù–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π ‚Üí —Å—Ç—Ä–∞–Ω–Ω–æ, skip
                continue;
            }

            let Some(collider_variant) = result.get("collider") else {
                continue;
            };

            let Ok(collider_node) = collider_variant.try_to::<Gd<godot::classes::Node>>() else {
                continue;
            };

            let collider_id = collider_node.instance_id();
            let enemy_instance_id = enemy_node.instance_id();

            // –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –ù–ï –≤ enemy ‚Üí LOS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, skip
            if collider_id != enemy_instance_id {
                continue;
            }

            // ‚úÖ –í–†–ê–ì –í–ò–î–ò–ú! –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ
            if let Some((_, current_min_dist)) = closest_visible_enemy {
                if distance_to_enemy < current_min_dist {
                    closest_visible_enemy = Some((enemy_entity, distance_to_enemy));
                }
            } else {
                closest_visible_enemy = Some((enemy_entity, distance_to_enemy));
            }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –∏ –æ–Ω –ù–ï —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É target ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        if let Some((closest_entity, closest_distance)) = closest_visible_enemy {
            if closest_entity != *current_target {
                // ‚úÖ –ó–ê–ú–ï–ù–Ø–ï–ú TARGET –≤ AIState::Combat
                if let ai::AIState::Combat { ref mut target } = ai_state.as_mut() {
                    let old_target = *target;
                    *target = closest_entity;

                    voidrun_simulation::log(&format!(
                        "üéØ TARGET SWITCH (closest visible): {:?} switches from {:?} to {:?} at {:.1}m",
                        entity, old_target, closest_entity, closest_distance
                    ));
                }
            }
        }
    }

}

/// System: Aim weapon at target (RightHand rotation)
/// –ï—Å–ª–∏ –∞–∫—Ç—ë—Ä –≤ Combat state ‚Üí –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä—É–∫—É –∫ target
///
/// –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Godot Transform –∏–∑ VisualRegistry (–Ω–µ ECS Transform!)
pub fn weapon_aim_main_thread(
    actors: Query<(Entity, &ai::AIState), With<Actor>>,
    visuals: NonSend<VisualRegistry>,
) {
    for (entity, state) in actors.iter() {
        // –¶–µ–ª–∏–º—Å—è —Ç–æ–ª—å–∫–æ –≤ Combat state
        if let ai::AIState::Combat { target } = state {
            // –ü–æ–ª—É—á–∞–µ–º actor node (shooter)
            let Some(mut actor_node) = visuals.visuals.get(&entity).cloned() else {
                continue;
            };

            // –ü–æ–ª—É—á–∞–µ–º target node (–ù–ï ECS Transform ‚Äî Godot Transform!)
            let Some(target_node) = visuals.visuals.get(target).cloned() else {
                continue;
            };

            // Godot positions (tactical layer ‚Äî authoritative –¥–ª—è aim)
            let target_pos = target_node.get_global_position();
            let actor_pos = actor_node.get_global_position();
            let to_target = target_pos - actor_pos;

            if to_target.length() > 0.01 {
                // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å actor body –∫ target
                actor_node.look_at(target_pos);

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º RightHand (–æ—Ä—É–∂–∏–µ) –∫ target –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
                if let Some(mut right_hand) = actor_node.try_get_node_as::<Node3D>("RightHand") {
                    right_hand.look_at(target_pos);
                }
            }
        }
    }
}

/// System: Process WeaponFireIntent ‚Üí validate distance/LOS ‚Üí generate WeaponFired
///
/// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (Hybrid Intent-based):
/// - ECS –æ—Ç–ø—Ä–∞–≤–∏–ª WeaponFireIntent (strategic: "—Ö–æ—á—É —Å—Ç—Ä–µ–ª—è—Ç—å")
/// - Godot –ø—Ä–æ–≤–µ—Ä—è–µ—Ç tactical constraints (distance, line of sight)
/// - –ï—Å–ª–∏ OK ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç WeaponFired –¥–ª—è spawn projectile
///
/// **Note:** Target switching –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π `update_combat_targets_main_thread`
///
/// –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Godot Transform –∏–∑ VisualRegistry (authoritative!)
pub fn process_ranged_attack_intents_main_thread(
    mut intent_events: EventReader<WeaponFireIntent>,
    actors: Query<&Actor>,
    visuals: NonSend<VisualRegistry>,
    scene_root: NonSend<crate::systems::SceneRoot>,
    mut fire_events: EventWriter<WeaponFired>,
) {
    for intent in intent_events.read() {
        // –ü–æ–ª—É—á–∞–µ–º shooter node
        let Some(shooter_node) = visuals.visuals.get(&intent.shooter).cloned() else {
            voidrun_simulation::log(&format!(
                "Weapon intent rejected: shooter {:?} visual not found",
                intent.shooter
            ));
            continue;
        };

        // Player FPS shooting (no target) ‚Üí skip validation, emit WeaponFired immediately
        let Some(target_entity) = intent.target else {
            fire_events.write(WeaponFired {
                shooter: intent.shooter,
                target: None,
                damage: intent.damage,
                speed: intent.speed,
                shooter_position: {
                    let pos = shooter_node.get_global_position();
                    Vec3::new(pos.x, pos.y, pos.z)
                },
                hearing_range: intent.hearing_range,
            });
            continue;
        };

        // AI shooting (has target) ‚Üí validate distance + LOS
        let Some(target_node) = visuals.visuals.get(&target_entity).cloned() else {
            voidrun_simulation::log(&format!(
                "Weapon intent rejected: target {:?} visual not found",
                target_entity
            ));
            continue;
        };

        // ‚úÖ Tactical validation: distance check (Godot Transform authoritative)
        let shooter_pos = shooter_node.get_global_position();
        let target_pos = target_node.get_global_position();
        let distance = (target_pos - shooter_pos).length();

        if distance > intent.max_range {
            voidrun_simulation::log(&format!(
                "Weapon intent rejected: distance {:.1}m > max_range {:.1}m (shooter {:?} ‚Üí target {:?})",
                distance, intent.max_range, intent.shooter, target_entity
            ));
            continue;
        }

        if distance < 0.5 {
            voidrun_simulation::log(&format!(
                "Weapon intent rejected: too close {:.1}m (shooter {:?} ‚Üí target {:?})",
                distance, intent.shooter, target_entity
            ));
            continue;
        }

        // ‚úÖ Line-of-Sight Check: raycast –æ—Ç shooter –∫ target (eye-level Y+0.8)
        let shooter_eye = shooter_pos + Vector3::new(0.0, 0.8, 0.0);
        let target_eye = target_pos + Vector3::new(0.0, 0.8, 0.0);

        let world = scene_root.node.get_world_3d();
        let Some(mut world) = world else {
            voidrun_simulation::log_error("process_weapon_fire_intents: World3D –Ω–µ –Ω–∞–π–¥–µ–Ω");
            continue;
        };

        let space = world.get_direct_space_state();
        let Some(mut space) = space else {
            voidrun_simulation::log_error("process_weapon_fire_intents: PhysicsDirectSpaceState3D –Ω–µ –Ω–∞–π–¥–µ–Ω");
            continue;
        };

        // –°–æ–∑–¥–∞—ë–º raycast query
        let query_params = godot::classes::PhysicsRayQueryParameters3D::create(shooter_eye, target_eye);
        let Some(mut query) = query_params else {
            voidrun_simulation::log_error("process_weapon_fire_intents: PhysicsRayQueryParameters3D::create failed");
            continue;
        };

        // Collision mask: Actors + Environment (LOS check)
        query.set_collision_mask(crate::collision_layers::COLLISION_MASK_RAYCAST_LOS);

        let empty_array = godot::prelude::Array::new();
        query.set_exclude(&empty_array); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–ª–∏–∑–∏–∏

        // –í—ã–ø–æ–ª–Ω—è–µ–º raycast
        let result = space.intersect_ray(&query);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.is_empty() {
            // –ù–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π ‚Üí —Å—Ç—Ä–∞–Ω–Ω–æ (target –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω), –ù–ï —Å—Ç—Ä–µ–ª—è–µ–º
            voidrun_simulation::log(&format!(
                "üö´ LOS CHECK FAILED: no raycast hit (shooter {:?} ‚Üí target {:?}, distance {:.1}m) - possible raycast bug or target out of range",
                intent.shooter, target_entity, distance
            ));
            continue;
        }

        let Some(collider_variant) = result.get("collider") else {
            voidrun_simulation::log_error("process_weapon_fire_intents: raycast result missing 'collider'");
            continue;
        };

        let Ok(collider_node) = collider_variant.try_to::<Gd<godot::classes::Node>>() else {
            voidrun_simulation::log_error("process_weapon_fire_intents: collider –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Node");
            continue;
        };

        let collider_id = collider_node.instance_id();

        // –ü–æ–ª—É—á–∞–µ–º target node instance_id
        let target_instance_id = target_node.instance_id();

        // –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ target ‚Üí –≤—Å—ë OK, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if collider_id == target_instance_id {
            // LOS clear, –ø–æ–ø–∞–ª–∏ —Ç–æ—á–Ω–æ –≤ target
        } else {
            // –ü–æ–ø–∞–ª–∏ –ù–ï –≤ target ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ (—Å—Ç–µ–Ω–∞? —Å–æ—é–∑–Ω–∏–∫? –≤—Ä–∞–≥?)

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ entity –ø–æ collider instance_id (reverse lookup)
            let Some(&collider_entity) = visuals.node_to_entity.get(&collider_id) else {
                // –ù–µ actor ‚Üí –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—Ç–µ–Ω–∞/–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ (layer 3)
                // LOS blocked ‚Üí –æ—Ç–∫–ª–æ–Ω—è–µ–º fire intent (movement_system –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç)
                voidrun_simulation::log(&format!(
                    "üö´ LOS BLOCKED BY OBSTACLE: shooter {:?} ‚Üí target {:?} (obstacle: {:?}) - fire intent rejected",
                    intent.shooter, target_entity, collider_id
                ));
                continue;
            };

            // –≠—Ç–æ actor ‚Üí –ø—Ä–æ–≤–µ—Ä—è–µ–º faction
            let Ok(collider_actor) = actors.get(collider_entity) else {
                voidrun_simulation::log(&format!(
                    "‚ö†Ô∏è Collider entity {:?} has no Actor component",
                    collider_entity
                ));
                continue;
            };

            let Ok(shooter_actor) = actors.get(intent.shooter) else {
                continue;
            };

            if collider_actor.faction_id == shooter_actor.faction_id {
                // –°–æ—é–∑–Ω–∏–∫ –Ω–∞ –ª–∏–Ω–∏–∏ –æ–≥–Ω—è ‚Üí –ù–ï —Å—Ç—Ä–µ–ª—è–µ–º
                voidrun_simulation::log(&format!(
                    "üö´ FRIENDLY FIRE RISK: shooter {:?} (faction {}) won't shoot through ally {:?} (faction {}) at target {:?}",
                    intent.shooter, shooter_actor.faction_id, collider_entity, collider_actor.faction_id, target_entity
                ));
                continue;
            }

            // –í—Ä–∞–≥ –Ω–∞ –ª–∏–Ω–∏–∏ –æ–≥–Ω—è ‚Üí –ù–ï —Å—Ç—Ä–µ–ª—è–µ–º (target switching –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç update_combat_targets_main_thread)
            voidrun_simulation::log(&format!(
                "üö´ LOS BLOCKED BY ENEMY: shooter {:?} ‚Üí target {:?} blocked by enemy {:?} (faction {})",
                intent.shooter, target_entity, collider_entity, collider_actor.faction_id
            ));
            continue;
        }

        // ‚úÖ All tactical validations passed ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º WeaponFired
        fire_events.write(WeaponFired {
            shooter: intent.shooter,
            target: Some(target_entity),
            damage: intent.damage,
            speed: intent.speed,
            shooter_position: Vec3::new(shooter_pos.x, shooter_pos.y, shooter_pos.z),  // Godot Vector3 ‚Üí Bevy Vec3
            hearing_range: intent.hearing_range,  // –†–∞–¥–∏—É—Å —Å–ª—ã—à–∏–º–æ—Å—Ç–∏ –∏–∑ –æ—Ä—É–∂–∏—è
        });

        voidrun_simulation::log(&format!(
            "Weapon intent APPROVED: shooter {:?} ‚Üí target {:?} (distance: {:.1}m)",
            intent.shooter, target_entity, distance
        ));
    }
}

/// Helper: Find bullet spawn position (BulletSpawn ‚Üí weapon root ‚Üí RightHand ‚Üí actor)
///
/// Returns: (spawn_position, weapon_node_for_direction)
fn find_bullet_spawn_position(actor_node: &Gd<Node3D>) -> (Vector3, Option<Gd<Node3D>>) {
    // Try 1: RightHandAttachment (attachment point)
    let Some(weapon_attachment) = actor_node.try_get_node_as::<Node3D>("%RightHandAttachment") else {
        // Fallback 1: RightHand
        if let Some(right_hand) = actor_node.try_get_node_as::<Node3D>("RightHand") {
            voidrun_simulation::log("‚ö†Ô∏è WeaponAttachment not found, using RightHand");
            return (right_hand.get_global_position(), Some(right_hand));
        }

        // Fallback 2: Actor position
        voidrun_simulation::log("‚ö†Ô∏è RightHand not found, using actor position");
        return (actor_node.get_global_position(), None);
    };

    // Try 2: Get weapon prefab (first child of attachment)
    let weapon_prefab = if weapon_attachment.get_child_count() > 0 {
        weapon_attachment.get_child(0).and_then(|node| node.try_cast::<Node3D>().ok())
    } else {
        None
    };

    let Some(weapon_prefab) = weapon_prefab else {
        voidrun_simulation::log("‚ö†Ô∏è No weapon attached to RightHandAttachment");
        return (weapon_attachment.get_global_position(), Some(weapon_attachment));
    };

    // Try 3: Find BulletSpawn via unique name
    if let Some(bullet_spawn_node) = weapon_prefab.get_node_or_null("%BulletSpawn") {
        if let Ok(bullet_spawn) = bullet_spawn_node.try_cast::<Node3D>() {
            return (bullet_spawn.get_global_position(), Some(bullet_spawn));
        }
    }

    // Try 4: Legacy fallback - recursive search
    if let Some(bullet_spawn) = find_node_recursive(&weapon_attachment, "BulletSpawn") {
        return (bullet_spawn.get_global_position(), Some(bullet_spawn));
    }

    // Fallback 5: Weapon root position
    voidrun_simulation::log("‚ö†Ô∏è BulletSpawn not found (add unique_name_in_owner to weapon prefab)");
    (weapon_prefab.get_global_position(), Some(weapon_prefab))
}

/// System: Process WeaponFired events ‚Üí spawn Godot projectile
/// –°–æ–∑–¥–∞—ë—Ç GodotProjectile (–ø–æ–ª–Ω–æ—Å—Ç—å—é Godot-managed, –ù–ï –≤ ECS)
/// Direction —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ weapon bone rotation (+Z forward axis)
///
/// –í–ê–ñ–ù–û: Fallback direction –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Godot Transform –∏–∑ VisualRegistry!
pub fn weapon_fire_main_thread(
    mut fire_events: EventReader<WeaponFired>,
    visuals: NonSend<VisualRegistry>,
    scene_root: NonSend<crate::systems::SceneRoot>,
    mut registry: NonSendMut<crate::projectile_registry::GodotProjectileRegistry>,
) {
    for event in fire_events.read() {
        // –ù–∞—Ö–æ–¥–∏–º actor node
        let Some(actor_node) = visuals.visuals.get(&event.shooter) else {
            voidrun_simulation::log(&format!("Actor {:?} visual not found", event.shooter));
            continue;
        };

        // 1. –ù–∞—Ö–æ–¥–∏–º BulletSpawn node –¥–ª—è spawn_position (Golden Path helper)
        let (spawn_position, weapon_node) = find_bullet_spawn_position(actor_node);

        // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º direction –∏–∑ weapon bone rotation
        let direction = if let Some(weapon) = weapon_node {
            // –ë–µ—Ä—ë–º +Z axis weapon bone (–Ω–∞—à–∞ –º–æ–¥–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –≤ +Z, –Ω–µ -Z –∫–∞–∫ Godot convention)
            let global_transform = weapon.get_global_transform();
            let dir = global_transform.basis.col_c();
            voidrun_simulation::log(&format!("üî´ Weapon direction: {:?}", dir));
            dir // basis.z = forward –¥–ª—è –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏
        } else {
            // Fallback: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç shooter –∫ target (–µ—Å–ª–∏ –µ—Å—Ç—å target)
            if let Some(target_entity) = event.target {
                if let Some(target_node) = visuals.visuals.get(&target_entity) {
                    let shooter_pos = actor_node.get_global_position();
                    let target_pos = target_node.get_global_position();
                    (target_pos - shooter_pos).normalized()
                } else {
                    voidrun_simulation::log("Target visual not found, using default forward");
                    Vector3::new(0.0, 0.0, -1.0) // Default -Z forward
                }
            } else {
                // No target (player FPS) ‚Üí default forward
                Vector3::new(0.0, 0.0, -1.0) // Default -Z forward
            }
        };

        // 3. –°–æ–∑–¥–∞—ë–º GodotProjectile (–ø–æ–ª–Ω–æ—Å—Ç—å—é Godot-managed)
        spawn_godot_projectile(
            event.shooter,
            spawn_position,
            direction,
            event.speed,
            event.damage,
            &scene_root.node,
            &mut registry,
        );

        voidrun_simulation::log(&format!(
            "Spawned projectile: shooter={:?} ‚Üí target={:?} at {:?} dir={:?} dmg={}",
            event.shooter, event.target, spawn_position, direction, event.damage
        ));
    }
}

/// Helper: —Å–æ–∑–¥–∞—Ç—å GodotProjectile (–ø–æ–ª–Ω–æ—Å—Ç—å—é Godot-managed)
fn spawn_godot_projectile(
    shooter: Entity,
    position: Vector3,
    direction: Vector3,
    speed: f32,
    damage: u32,
    scene_root: &Gd<Node3D>,
    registry: &mut crate::projectile_registry::GodotProjectileRegistry,
) {
    use crate::projectile::GodotProjectile;

    // 1. –°–æ–∑–¥–∞—ë–º GodotProjectile node
    let mut projectile = Gd::<GodotProjectile>::from_init_fn(|base| {
        GodotProjectile::init(base)
    });

    projectile.set_position(position);

    // Collision layers: Projectiles (layer 4)
    // Collision mask: Actors + Environment (projectiles hit actors and walls)
    projectile.set_collision_layer(crate::collision_layers::COLLISION_LAYER_PROJECTILES);
    projectile.set_collision_mask(crate::collision_layers::COLLISION_MASK_PROJECTILES);

    // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ layers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    voidrun_simulation::log(&format!(
        "Projectile collision setup: layer={} mask={}",
        projectile.get_collision_layer(),
        projectile.get_collision_mask()
    ));

    // 2. Setup –ø–∞—Ä–∞–º–µ—Ç—Ä—ã projectile
    projectile.bind_mut().setup(
        shooter.to_bits() as i64,
        direction,
        speed,
        damage as i64,
    );

    // 3. SphereMesh –≤–∏–∑—É–∞–ª (–∫—Ä–∞—Å–Ω–∞—è –ø—É–ª—è)
    let mut mesh_instance = godot::classes::MeshInstance3D::new_alloc();
    let mut sphere = SphereMesh::new_gd();
    sphere.set_radius(0.1); // 10 —Å–º –ø—É–ª—è
    sphere.set_height(0.2);
    mesh_instance.set_mesh(&sphere.upcast::<Mesh>());

    // –ö—Ä–∞—Å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    let mut material = StandardMaterial3D::new_gd();
    material.set_albedo(Color::from_rgb(1.0, 0.3, 0.3));
    mesh_instance.set_surface_override_material(0, &material.upcast::<Material>());

    projectile.add_child(&mesh_instance.upcast::<Node>());

    // 4. CollisionShape3D (—Å—Ñ–µ—Ä–∞)
    let mut collision = CollisionShape3D::new_alloc();
    let mut sphere_shape = SphereShape3D::new_gd();
    sphere_shape.set_radius(0.1);
    collision.set_shape(&sphere_shape.upcast::<godot::classes::Shape3D>());

    projectile.add_child(&collision.upcast::<Node>());

    // 5. Register projectile in registry (BEFORE adding to scene)
    registry.register(projectile.clone());

    // 6. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É (Godot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç _physics_process)
    scene_root.clone().upcast::<Node>().add_child(&projectile.upcast::<Node>());
}

// ‚ùå projectile_physics —É–¥–∞–ª–µ–Ω–∞ ‚Äî GodotProjectile::physics_process –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—ë

/// System: Process projectile collisions (Godot ‚Üí ECS)
///
/// Reads collision info from GodotProjectile nodes.
/// Generates ProjectileHit events –¥–ª—è ECS damage processing.
/// Despawns projectiles after processing.
///
/// **Frequency:** Every frame (60 Hz)
pub fn projectile_collision_system_main_thread(
    mut registry: NonSendMut<crate::projectile_registry::GodotProjectileRegistry>,
    visuals: NonSend<VisualRegistry>,
    mut projectile_hit_events: EventWriter<voidrun_simulation::combat::ProjectileHit>,
) {
    // Cleanup destroyed projectiles first
    registry.cleanup_destroyed();

    // Process collisions
    let mut to_remove = Vec::new();

    for (instance_id, mut projectile) in registry.projectiles.iter_mut() {
        // Check if projectile has collision info
        let Some(collision_info) = projectile.bind().collision_info.clone() else {
            continue;  // No collision yet
        };

        // Reverse lookup: InstanceId ‚Üí Entity
        let Some(&target_entity) = visuals.node_to_entity.get(&collision_info.target_instance_id) else {
            voidrun_simulation::log(&format!(
                "‚ö†Ô∏è Projectile collision with unknown entity (InstanceId: {:?})",
                collision_info.target_instance_id
            ));
            to_remove.push(*instance_id);
            projectile.queue_free();
            continue;
        };

        // Check self-hit (projectile –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–ø–∞–¥–∞—Ç—å –≤ shooter)
        let shooter = projectile.bind().shooter;
        if target_entity == shooter {
            voidrun_simulation::log(&format!(
                "üö´ Projectile ignored self-collision: shooter={:?}",
                shooter
            ));
            // Clear collision info, projectile –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ª–µ—Ç–µ—Ç—å
            projectile.bind_mut().collision_info = None;
            continue;
        };

        // ‚úÖ Generate ProjectileHit event (Godot ‚Üí ECS)
        let damage = projectile.bind().damage;
        projectile_hit_events.write(voidrun_simulation::combat::ProjectileHit {
            shooter,
            target: target_entity,
            damage,
        });

        voidrun_simulation::log(&format!(
            "üí• Projectile hit! Shooter: {:?} ‚Üí Target: {:?}, Damage: {} (normal: {:?})",
            shooter, target_entity, damage, collision_info.impact_normal
        ));

        // Despawn projectile
        to_remove.push(*instance_id);
        projectile.queue_free();
    }

    // Cleanup processed projectiles from registry
    for instance_id in to_remove {
        registry.unregister(instance_id);
    }
}

/// Helper: —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ node –ø–æ –∏–º–µ–Ω–∏
fn find_node_recursive(parent: &Gd<Node3D>, name: &str) -> Option<Gd<Node3D>> {
    for i in 0..parent.get_child_count() {
        if let Some(child) = parent.get_child(i) {
            if child.get_name().to_string() == name {
                return child.try_cast::<Node3D>().ok();
            }
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –¥–µ—Ç—è—Ö
            if let Ok(child_node3d) = child.try_cast::<Node3D>() {
                if let Some(found) = find_node_recursive(&child_node3d, name) {
                    return Some(found);
                }
            }
        }
    }
    None
}

/// System: Detect visible melee windups (CombatUpdate, 10 Hz)
///
/// For all actors in Windup phase:
/// - Spatial query: enemies within weapon range
/// - Angle check: **MUTUAL FACING** (both attacker‚Üídefender AND defender‚Üíattacker within 35¬∞ cone)
/// - Visibility: defender in attacker's SpottedEnemies
/// - Emit: GodotAIEvent::EnemyWindupVisible (broadcast to all visible defenders)
///
/// **AI —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ cues (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è player + AI)**
///
/// **Frequency:** 10 Hz (CombatUpdate schedule)
/// **Parameters:** Hardcoded (angle 35¬∞, –±—É–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ WeaponStats)
pub fn detect_melee_windups_main_thread(
    attackers: Query<(Entity, &Actor, &MeleeAttackState, &WeaponStats, &SpottedEnemies)>,
    defenders: Query<&Actor>,
    visuals: NonSend<VisualRegistry>,
    mut ai_events: EventWriter<GodotAIEvent>,
) {
    for (attacker_entity, attacker_actor, attack_state, weapon, spotted) in attackers.iter() {
        // –¢–æ–ª—å–∫–æ Windup phase
        if !attack_state.is_windup() {
            continue;
        }

        // Godot Transform (tactical layer)
        let Some(attacker_node) = visuals.visuals.get(&attacker_entity) else {
            continue;
        };

        let attacker_pos = attacker_node.get_global_position();

        // Spatial query: –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –≤—Ä–∞–≥–∏ –≤ spotted
        for &defender_entity in &spotted.enemies {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ faction (—Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–∏)
            let Ok(defender_actor) = defenders.get(defender_entity) else {
                continue;
            };

            if defender_actor.faction_id == attacker_actor.faction_id {
                continue;
            }

            // Distance check
            let Some(defender_node) = visuals.visuals.get(&defender_entity) else {
                continue;
            };

            let defender_pos = defender_node.get_global_position();
            let distance = (defender_pos - attacker_pos).length();

            if distance > weapon.attack_radius {
                continue;
            }

            // ‚úÖ MUTUAL FACING CHECK (using actor_utils)
            let Some((dot_attacker, dot_defender)) = actors_facing_each_other(
                attacker_node,
                defender_node,
                angles::TIGHT_35_DEG,
            ) else {
                continue; // Not facing each other
            };

            // ‚úÖ MUTUAL FACING - DEFENDER CAN SEE WINDUP!
            ai_events.write(GodotAIEvent::EnemyWindupVisible {
                attacker: attacker_entity,
                defender: defender_entity,
                attack_type: AttackType::Melee, // –í—Å–µ–≥–¥–∞ Melee –¥–ª—è melee –∞—Ç–∞–∫
                windup_remaining: attack_state.phase_timer,
            });

            voidrun_simulation::log(&format!(
                "üëÅÔ∏è Windup visible (MUTUAL FACING): {:?} ‚Üí {:?} (distance: {:.1}m, attacker_angle: {:.2}, defender_angle: {:.2}, windup: {:.2}s)",
                attacker_entity, defender_entity, distance, dot_attacker, dot_defender, attack_state.phase_timer
            ));
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_weapon_aim_only_in_combat() {
        // Verify aim system only triggers in Combat state
        // (unit test –±–µ–∑ Godot API)
    }
}
