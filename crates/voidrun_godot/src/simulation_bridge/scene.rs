//! Scene creation (navigation, lights, camera, UI)
//!
//! Extension –º–µ—Ç–æ–¥—ã –¥–ª—è SimulationBridge (—Å–æ–∑–¥–∞–Ω–∏–µ 3D —Å—Ü–µ–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ).

use super::SimulationBridge;
use crate::camera::rts_camera::RTSCamera3D;
use godot::classes::{light_3d::Param as LightParam, Button, CanvasLayer, DirectionalLight3D, Label, Node, Timer};
use godot::prelude::*;

impl SimulationBridge {
    /// –°–æ–∑–¥–∞—Ç—å NavigationRegion3D + NavMesh (baking –∏–∑ SceneTree children)
    ///
    /// TEST: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ NavMesh –∑–∞–ø–µ–∫–∞–µ—Ç—Å—è –∏–∑ StaticBody3D/CSGBox3D children,
    /// –∞ –Ω–µ –∏–∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ chunk building).
    pub(super) fn create_navigation_region(&mut self) {
        use crate::chunk_navmesh::{create_test_navigation_region_with_obstacles, NavMeshBakingParams};

        // 1. –°–æ–∑–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã NavMesh baking
        let mut params = NavMeshBakingParams::default();
        params.baking_aabb = godot::builtin::Aabb {
            position: Vector3::new(-200.0, -1.0, -200.0),
            size: Vector3::new(400.0, 10.0, 400.0), // –í—ã—Å–æ—Ç–∞ 10–º (–¥–ª—è –±–æ–∫—Å–æ–≤)
        };

        // 2. –°–æ–∑–¥–∞—ë–º NavigationRegion3D —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ obstacles —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
        let mut nav_region = create_test_navigation_region_with_obstacles(&params);

        // 3. –î–æ–±–∞–≤–ª—è–µ–º NavigationRegion3D –≤ —Å—Ü–µ–Ω—É –ü–ï–†–ï–î baking
        self.base_mut().add_child(&nav_region.clone().upcast::<Node>());

        voidrun_simulation::log("üîß Baking NavMesh from SceneTree (StaticBody3D children)...");

        // 4. Bake NavMesh –∏–∑ SceneTree children (–ö–†–ò–¢–ò–ß–ù–û: region –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ tree!)
        nav_region.bake_navigation_mesh(); // –ê–°–ò–ù–•–†–û–ù–ù–´–ô baking –∏–∑ children

        // 5. –°–æ–∑–¥–∞—ë–º Timer –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (baking –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        let mut timer = Timer::new_alloc();
        timer.set_wait_time(2.0); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞
        timer.set_one_shot(true);

        // –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ add_child, –ø–æ—Ç–æ–º connect –∏ start!
        self.base_mut().add_child(&timer.clone().upcast::<Node>());

        // Clone nav_region –¥–ª—è callback
        let nav_region_for_callback = nav_region.clone();

        // –°–æ–∑–¥–∞—ë–º callable –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è
        let check_callback = Callable::from_fn("check_navmesh_bake", move |_args| {
            voidrun_simulation::log_error("‚è∞ Timer callback triggered!");

            let baked_mesh = nav_region_for_callback.get_navigation_mesh();
            if let Some(mesh) = baked_mesh {
                let vertex_count = mesh.get_vertices().len();
                let polygon_count = mesh.get_polygon_count();
                voidrun_simulation::log_error(&format!(
                    "‚úÖ NavMesh baked (after 2 sec): {} vertices, {} polygons",
                    vertex_count, polygon_count
                ));

                if polygon_count == 0 {
                    voidrun_simulation::log_error(
                        "‚ùå WARNING: NavMesh has 0 polygons! Check geometry/parameters",
                    );
                } else {
                    voidrun_simulation::log_error(
                        "üéâ NavMesh baking SUCCESS - physical objects detected!",
                    );
                }
            } else {
                voidrun_simulation::log_error("‚ùå ERROR: Failed to bake NavMesh!");
            }
            Variant::nil()
        });

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º timeout signal –∫ callable
        timer.connect("timeout", &check_callback);

        // –ó–∞–ø—É—Å–∫–∞–µ–º timer
        timer.start();

        voidrun_simulation::log_error(
            "‚úÖ NavigationRegion3D ready, baking in progress (check in 2 sec)...",
        );
    }

    /// –°–æ–∑–¥–∞—Ç—å lights (directional sun)
    pub(super) fn create_lights(&mut self) {
        let mut light = DirectionalLight3D::new_alloc();
        light.set_rotation_degrees(Vector3::new(-45.0, 0.0, 0.0));
        light.set_param(LightParam::ENERGY, 1.0);

        self.base_mut().add_child(&light.upcast::<Node>());
    }

    /// –°–æ–∑–¥–∞—Ç—å RTS camera (WASD + mouse orbit + scroll zoom)
    pub(super) fn create_camera(&mut self) {
        let mut camera = Gd::<RTSCamera3D>::from_init_fn(|base| RTSCamera3D::init(base));

        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
        camera.set_position(Vector3::new(0.0, 5.0, 0.0));
        camera.set_rotation_degrees(Vector3::new(0.0, 0.0, 0.0));

        self.base_mut().add_child(&camera.upcast::<Node>());

        voidrun_simulation::log("RTSCamera3D added - use WASD, RMB drag, mouse wheel");
    }

    /// –°–æ–∑–¥–∞—Ç—å FPS counter label + Spawn button (top-left corner)
    ///
    /// Returns (fps_label, spawn_button) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è references –≤ SimulationBridge
    pub(super) fn create_fps_label(&mut self) -> (Gd<Label>, Gd<Button>) {
        // CanvasLayer –¥–ª—è UI overlay (—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –ø–æ–≤–µ—Ä—Ö 3D —Å—Ü–µ–Ω—ã)
        let mut canvas_layer = CanvasLayer::new_alloc();

    // Label –¥–ª—è FPS
    let mut label = Label::new_alloc();
    label.set_text("FPS: --");

    // –ü–æ–∑–∏—Ü–∏—è: top-left corner
    label.set_position(Vector2::new(10.0, 10.0));

    // –°—Ç–∏–ª—å: –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç, –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
    label.add_theme_color_override("font_color", Color::from_rgb(1.0, 1.0, 1.0));
    label.add_theme_font_size_override("font_size", 24);

    // –î–æ–±–∞–≤–ª—è–µ–º label –≤ canvas layer
    canvas_layer.add_child(&label.clone().upcast::<Node>());

    // Button –¥–ª—è —Å–ø–∞–≤–Ω–∞ NPC (–ø–æ–¥ FPS label)
    let mut button = Button::new_alloc();
    button.set_text("Spawn NPCs");
    button.set_position(Vector2::new(10.0, 50.0)); // –ü–æ–¥ FPS label
    button.set_size(Vector2::new(150.0, 40.0));

    // NOTE: Signal –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ SimulationBridge::ready() (–Ω—É–∂–µ–Ω callable)
    // button.connect("pressed", &callable);

    // –î–æ–±–∞–≤–ª—è–µ–º button –≤ canvas layer
    canvas_layer.add_child(&button.clone().upcast::<Node>());

    // Button –¥–ª—è —Å–ø–∞–≤–Ω–∞ Player (–ø–æ–¥ Spawn NPCs button)
    let mut player_button = Button::new_alloc();
    player_button.set_text("Spawn Player");
    player_button.set_position(Vector2::new(10.0, 100.0)); // –ü–æ–¥ Spawn NPCs button
    player_button.set_size(Vector2::new(150.0, 40.0));

    // NOTE: Signal –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ SimulationBridge::ready() (–Ω—É–∂–µ–Ω callable)
    // player_button.connect("pressed", &player_callable);

    // –î–æ–±–∞–≤–ª—è–µ–º player button –≤ canvas layer
    canvas_layer.add_child(&player_button.upcast::<Node>());

        // –î–æ–±–∞–≤–ª—è–µ–º canvas layer –≤ —Å—Ü–µ–Ω—É
        self.base_mut().add_child(&canvas_layer.upcast::<Node>());

        voidrun_simulation::log("FPS counter + Spawn buttons UI created (top-left corner)");

        (label, button)
    }
}
