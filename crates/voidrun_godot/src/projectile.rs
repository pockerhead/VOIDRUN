//! GodotProjectile ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é Godot-managed projectile
//!
//! Architecture (ADR-005):
//! - Godot –≤–ª–∞–¥–µ–µ—Ç –≤—Å–µ–º lifecycle: spawn, physics, collision, cleanup
//! - ECS –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ ProjectileHit event –¥–ª—è damage calculation
//! - Projectile –ù–ï —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ECS (tactical layer only)
//!
//! # Refactored Architecture (Area3D signal-based)
//! - Projectile = Area3D (–¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç shields + bodies)
//! - Signal area_entered ‚Üí shield collision
//! - Signal body_entered ‚Üí actor hit
//! - Collision info —Ö—Ä–∞–Ω–∏—Ç—Å—è IN projectile (–Ω–µ –≤ global queue)
//! - GodotProjectileRegistry tracks all projectiles

use godot::prelude::*;
use godot::classes::{Area3D, IArea3D, CharacterBody3D};
use bevy::prelude::Entity;

/// Collision info (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ projectile –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ECS)
#[derive(Clone, Debug)]
pub struct ProjectileCollisionInfo {
    pub target_instance_id: InstanceId,
    pub impact_point: Vector3,
    pub impact_normal: Vector3,  // –î–ª—è VFX (spark direction, shield ripple, decals)
}

/// Shield collision info (separate from body collision)
#[derive(Clone, Debug)]
pub struct ProjectileShieldCollisionInfo {
    pub target_entity_id: u64, // Entity ID of shield owner (from StaticBody3D parent metadata)
    pub impact_point: Vector3,
    pub impact_normal: Vector3,  // –î–ª—è ripple VFX direction
}

/// Projectile ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Godot Area3D (signal-based collision)
#[derive(GodotClass)]
#[class(base=Area3D)]
pub struct GodotProjectile {
    base: Base<Area3D>,

    /// –ö—Ç–æ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è self-hit + damage attribution)
    pub shooter: Entity,

    /// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–∞
    pub direction: Vector3,

    /// –°–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)
    pub speed: f32,

    /// –£—Ä–æ–Ω
    pub damage: u32,

    /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã)
    pub lifetime: f32,

    /// Collision info (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ projectile, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ECS —Å–∏—Å—Ç–µ–º–æ–π)
    pub collision_info: Option<ProjectileCollisionInfo>,

    /// Shield collision info (separate detection via Area3D overlap)
    pub shield_collision_info: Option<ProjectileShieldCollisionInfo>,
}

#[godot_api]
impl IArea3D for GodotProjectile {
    fn init(base: Base<Area3D>) -> Self {
        Self {
            base,
            shooter: Entity::PLACEHOLDER,
            direction: Vector3::ZERO,
            speed: 30.0, // Default (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ setup())
            damage: 15,
            lifetime: 5.0,
            collision_info: None,
            shield_collision_info: None,
        }
    }

    fn ready(&mut self) {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º signals –¥–ª—è collision detection
        let callable_area = self.base().callable("on_area_entered");
        self.base_mut().connect("area_entered", &callable_area);

        let callable_body = self.base().callable("on_body_entered");
        self.base_mut().connect("body_entered", &callable_body);
    }

    fn process(&mut self, delta: f64) {
        // 1. –î–≤–∏–≥–∞–µ–º projectile (–ø—Ä–æ—Å—Ç–æ–µ –ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
        let velocity = self.direction * self.speed * delta as f32;
        let current_pos = self.base().get_global_position();
        self.base_mut().set_global_position(current_pos + velocity);

        // 2. –£–º–µ–Ω—å—à–∞–µ–º lifetime
        self.lifetime -= delta as f32;

        if self.lifetime <= 0.0 {
            // –£–¥–∞–ª—è–µ–º projectile –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
            self.base_mut().queue_free();
        }
    }
}

#[godot_api]
impl GodotProjectile {
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã projectile –ø—Ä–∏ spawn
    #[func]
    pub fn setup(&mut self, shooter_raw: i64, direction: Vector3, speed: f32, damage: i64) {
        self.shooter = Entity::from_raw(shooter_raw as u32);
        self.direction = direction.normalized();
        self.speed = speed;
        self.damage = damage as u32;

        voidrun_simulation::log(&format!(
            "Projectile setup: shooter={:?} dir={:?} speed={} dmg={}",
            self.shooter, self.direction, self.speed, self.damage
        ));
    }

    /// Signal handler: Area3D entered (shield collision)
    #[func]
    fn on_area_entered(&mut self, area: Gd<Area3D>) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ shield (Layer 16)
        if area.get_collision_layer() & crate::collision_layers::COLLISION_LAYER_SHIELDS == 0 {
            return; // –ù–µ shield
        }

        // –ü–æ–ª—É—á–∞–µ–º entity_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ shield (parent Actor node)
        let Some(parent) = area.get_parent() else {
            return;
        };

        if !parent.has_meta("entity_id") {
            return;
        }

        let entity_id_variant = parent.get_meta("entity_id");
        let Ok(entity_id) = entity_id_variant.try_to::<i64>() else {
            return;
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ self-hit
        if Entity::from_raw(entity_id as u32) == self.shooter {
            return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–π —â–∏—Ç
        }

        // Store shield collision info
        let impact_point = self.base().get_global_position();
        self.shield_collision_info = Some(ProjectileShieldCollisionInfo {
            target_entity_id: entity_id as u64,
            impact_point,
            impact_normal: Vector3::ZERO, // Area3D –Ω–µ –∏–º–µ–µ—Ç normal (TODO: calculate from position)
        });

        voidrun_simulation::log(&format!(
            "üõ°Ô∏è Projectile hit shield: entity={}, pos={:?}",
            entity_id, impact_point
        ));

        // –ù–ï —É–¥–∞–ª—è–µ–º projectile —Å—Ä–∞–∑—É! ECS —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç collision –∏ —É–¥–∞–ª–∏—Ç –ø–æ–∑–∂–µ
    }

    /// Signal handler: Body entered (actor collision)
    #[func]
    fn on_body_entered(&mut self, body: Gd<CharacterBody3D>) {
        let instance_id = body.instance_id();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ self-hit —á–µ—Ä–µ–∑ metadata (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if body.has_meta("entity_id") {
            let entity_id_variant = body.get_meta("entity_id");
            if let Ok(entity_id) = entity_id_variant.try_to::<i64>() {
                if Entity::from_raw(entity_id as u32) == self.shooter {
                    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ—ë —Ç–µ–ª–æ
                }
            }
        }

        // Store body collision info
        let impact_point = self.base().get_global_position();
        self.collision_info = Some(ProjectileCollisionInfo {
            target_instance_id: instance_id,
            impact_point,
            impact_normal: Vector3::ZERO, // Area3D –Ω–µ –∏–º–µ–µ—Ç normal
        });

        voidrun_simulation::log(&format!(
            "üéØ Projectile hit body: instance_id={:?}",
            instance_id
        ));

        // –ù–ï —É–¥–∞–ª—è–µ–º projectile —Å—Ä–∞–∑—É! ECS —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç collision –∏ —É–¥–∞–ª–∏—Ç –ø–æ–∑–∂–µ
    }
}
