//! GodotProjectile ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é Godot-managed projectile
//!
//! Architecture (ADR-005):
//! - Godot –≤–ª–∞–¥–µ–µ—Ç –≤—Å–µ–º lifecycle: spawn, physics, collision, cleanup
//! - ECS –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ ProjectileHit event –¥–ª—è damage calculation
//! - Projectile –ù–ï —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ECS (tactical layer only)

use godot::prelude::*;
use godot::classes::{CharacterBody3D, ICharacterBody3D};
use bevy::prelude::Entity;
use voidrun_simulation::combat::ProjectileHit;
use std::collections::HashMap;

/// Static queue –¥–ª—è ProjectileHit events (Godot ‚Üí ECS)
/// Godot –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ EventWriter, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º queue
static mut PROJECTILE_HIT_QUEUE: Option<Vec<ProjectileHit>> = None;

/// Static reverse mapping InstanceId ‚Üí Entity (–¥–ª—è projectile collision lookup)
static mut NODE_TO_ENTITY: Option<HashMap<godot::prelude::InstanceId, Entity>> = None;

pub fn init_projectile_hit_queue() {
    unsafe {
        PROJECTILE_HIT_QUEUE = Some(Vec::new());
        NODE_TO_ENTITY = Some(HashMap::new());
    }
}

pub fn register_collision_body(instance_id: godot::prelude::InstanceId, entity: Entity) {
    unsafe {
        if let Some(map) = NODE_TO_ENTITY.as_mut() {
            map.insert(instance_id, entity);
        }
    }
}

pub fn take_projectile_hits() -> Vec<ProjectileHit> {
    unsafe {
        PROJECTILE_HIT_QUEUE.as_mut().map(|q| q.drain(..).collect()).unwrap_or_default()
    }
}

/// Projectile ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Godot physics
#[derive(GodotClass)]
#[class(base=CharacterBody3D)]
pub struct GodotProjectile {
    base: Base<CharacterBody3D>,

    /// –ö—Ç–æ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è self-hit + damage attribution)
    pub shooter: Entity,

    /// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–∞
    pub direction: Vector3,

    /// –°–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)
    pub speed: f32,

    /// –£—Ä–æ–Ω
    pub damage: u32,

    /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã)
    pub lifetime: f32,
}

#[godot_api]
impl ICharacterBody3D for GodotProjectile {
    fn init(base: Base<CharacterBody3D>) -> Self {
        Self {
            base,
            shooter: Entity::PLACEHOLDER,
            direction: Vector3::ZERO,
            speed: 30.0, // Default (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ setup())
            damage: 15,
            lifetime: 5.0,
        }
    }

    fn physics_process(&mut self, delta: f64) {
        // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ physics_process –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        static mut FRAME_COUNT: u32 = 0;
        unsafe {
            FRAME_COUNT += 1;
            if FRAME_COUNT % 60 == 0 {
                voidrun_simulation::log(&format!(
                    "Projectile physics_process running (lifetime={:.1}s)",
                    self.lifetime
                ));
            }
        }

        // 1. –î–≤–∏–≥–∞–µ–º projectile
        let velocity = self.direction * self.speed;
        self.base_mut().set_velocity(velocity);

        let collision = self.base_mut().move_and_collide(velocity * delta as f32);

        // Debug: –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª move_and_collide
        static mut COLLISION_CHECK_COUNT: u32 = 0;
        unsafe {
            COLLISION_CHECK_COUNT += 1;
            if COLLISION_CHECK_COUNT % 60 == 0 {
                let has_collision = collision.is_some();
                voidrun_simulation::log(&format!(
                    "move_and_collide returned: has_collision={}",
                    has_collision
                ));
            }
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º collision
        if let Some(collision_info) = collision {
            voidrun_simulation::log(&format!(
                "üéØ Projectile collision detected! shooter={:?}",
                self.shooter
            ));

            // –ü–æ–ª—É—á–∞–µ–º Entity –∏–∑ collider (reverse lookup —á–µ—Ä–µ–∑ InstanceId)
            let collider = collision_info.get_collider();
            if let Some(collider_node) = collider {
                let instance_id = collider_node.instance_id();

                voidrun_simulation::log(&format!(
                    "  Collider: InstanceId={:?}",
                    instance_id
                ));

                // Reverse lookup InstanceId ‚Üí Entity
                let mut should_destroy = false;

                unsafe {
                    if let Some(map) = NODE_TO_ENTITY.as_ref() {
                        if let Some(&target_entity) = map.get(&instance_id) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º self-hit (projectile –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–ø–∞–¥–∞—Ç—å –≤ shooter)
                            if target_entity == self.shooter {
                                voidrun_simulation::log(&format!(
                                    "Projectile ignored self-collision: shooter={:?}",
                                    self.shooter
                                ));
                                // –ù–ï —É–¥–∞–ª—è–µ–º projectile - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ª–µ—Ç–µ—Ç—å
                            } else {
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ProjectileHit –≤ queue
                                if let Some(queue) = PROJECTILE_HIT_QUEUE.as_mut() {
                                    queue.push(ProjectileHit {
                                        shooter: self.shooter,
                                        target: target_entity,
                                        damage: self.damage,
                                    });

                                    voidrun_simulation::log(&format!(
                                        "Projectile hit! Shooter: {:?} ‚Üí Target: {:?}, Damage: {}",
                                        self.shooter, target_entity, self.damage
                                    ));
                                }
                                should_destroy = true; // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –ø–æ–ø–∞–¥–∞–Ω–∏–∏
                            }
                        } else {
                            voidrun_simulation::log(&format!(
                                "Projectile collision with unknown entity (InstanceId: {:?})",
                                instance_id
                            ));
                            should_destroy = true; // –£–¥–∞–ª—è–µ–º –ø—Ä–∏ collision —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
                        }
                    }
                }

                // –£–¥–∞–ª—è–µ–º projectile —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ self-collision
                if should_destroy {
                    self.base_mut().queue_free();
                    return;
                }
            }
        }

        // 3. –£–º–µ–Ω—å—à–∞–µ–º lifetime
        self.lifetime -= delta as f32;

        if self.lifetime <= 0.0 {
            // –£–¥–∞–ª—è–µ–º projectile –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
            self.base_mut().queue_free();
        }
    }
}

#[godot_api]
impl GodotProjectile {
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã projectile –ø—Ä–∏ spawn
    #[func]
    pub fn setup(&mut self, shooter_raw: i64, direction: Vector3, speed: f32, damage: i64) {
        self.shooter = Entity::from_raw(shooter_raw as u32);
        self.direction = direction.normalized();
        self.speed = speed;
        self.damage = damage as u32;

        voidrun_simulation::log(&format!(
            "Projectile setup: shooter={:?} dir={:?} speed={} dmg={}",
            self.shooter, self.direction, self.speed, self.damage
        ));
    }
}
