//! GodotProjectile ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é Godot-managed projectile
//!
//! Architecture (ADR-005):
//! - Godot –≤–ª–∞–¥–µ–µ—Ç –≤—Å–µ–º lifecycle: spawn, physics, collision, cleanup
//! - ECS –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ ProjectileHit event –¥–ª—è damage calculation
//! - Projectile –ù–ï —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ECS (tactical layer only)
//!
//! # Refactored Architecture (event-driven)
//! - Collision info —Ö—Ä–∞–Ω–∏—Ç—Å—è IN projectile (–Ω–µ –≤ global queue)
//! - GodotProjectileRegistry tracks all projectiles
//! - Collision processing —á–µ—Ä–µ–∑ dedicated ECS system

use godot::prelude::*;
use godot::classes::{CharacterBody3D, ICharacterBody3D};
use bevy::prelude::Entity;

/// Collision info (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ projectile –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ECS)
#[derive(Clone, Debug)]
pub struct ProjectileCollisionInfo {
    pub target_instance_id: InstanceId,
    pub impact_point: Vector3,
    pub impact_normal: Vector3,  // –î–ª—è VFX (spark direction, shield ripple, decals)
}

/// Projectile ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Godot physics
#[derive(GodotClass)]
#[class(base=CharacterBody3D)]
pub struct GodotProjectile {
    base: Base<CharacterBody3D>,

    /// –ö—Ç–æ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è self-hit + damage attribution)
    pub shooter: Entity,

    /// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–∞
    pub direction: Vector3,

    /// –°–∫–æ—Ä–æ—Å—Ç—å (–º/—Å)
    pub speed: f32,

    /// –£—Ä–æ–Ω
    pub damage: u32,

    /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã)
    pub lifetime: f32,

    /// Collision info (—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ projectile, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ECS —Å–∏—Å—Ç–µ–º–æ–π)
    pub collision_info: Option<ProjectileCollisionInfo>,
}

#[godot_api]
impl ICharacterBody3D for GodotProjectile {
    fn init(base: Base<CharacterBody3D>) -> Self {
        Self {
            base,
            shooter: Entity::PLACEHOLDER,
            direction: Vector3::ZERO,
            speed: 30.0, // Default (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ setup())
            damage: 15,
            lifetime: 5.0,
            collision_info: None,
        }
    }

    fn physics_process(&mut self, delta: f64) {
        // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ physics_process –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
        static mut FRAME_COUNT: u32 = 0;
        unsafe {
            FRAME_COUNT += 1;
            if FRAME_COUNT % 60 == 0 {
                voidrun_simulation::log(&format!(
                    "Projectile physics_process running (lifetime={:.1}s)",
                    self.lifetime
                ));
            }
        }

        // 1. –î–≤–∏–≥–∞–µ–º projectile
        let velocity = self.direction * self.speed;
        self.base_mut().set_velocity(velocity);

        let collision = self.base_mut().move_and_collide(velocity * delta as f32);

        // Debug: –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª move_and_collide
        static mut COLLISION_CHECK_COUNT: u32 = 0;
        unsafe {
            COLLISION_CHECK_COUNT += 1;
            if COLLISION_CHECK_COUNT % 60 == 0 {
                let has_collision = collision.is_some();
                voidrun_simulation::log(&format!(
                    "move_and_collide returned: has_collision={}",
                    has_collision
                ));
            }
        }

        // 2. Store collision info (–ù–ï –ø—É—à–∏–º –≤ queue!)
        if let Some(godot_collision) = collision {
            if let Some(collider_node) = godot_collision.get_collider() {
                let instance_id = collider_node.instance_id();
                let normal = godot_collision.get_normal();

                // ‚úÖ Store collision info IN projectile
                self.collision_info = Some(ProjectileCollisionInfo {
                    target_instance_id: instance_id,
                    impact_point: self.base().get_global_position(),
                    impact_normal: normal,
                });

                voidrun_simulation::log(&format!(
                    "üéØ Projectile stored collision: instance_id={:?}, normal={:?}",
                    instance_id, normal
                ));

                // NOTE: Projectile –ù–ï —É–¥–∞–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å!
                // ECS —Å–∏—Å—Ç–µ–º–∞ projectile_collision_system_main_thread —É–¥–∞–ª–∏—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
            }
        }

        // 3. –£–º–µ–Ω—å—à–∞–µ–º lifetime
        self.lifetime -= delta as f32;

        if self.lifetime <= 0.0 {
            // –£–¥–∞–ª—è–µ–º projectile –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
            self.base_mut().queue_free();
        }
    }
}

#[godot_api]
impl GodotProjectile {
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã projectile –ø—Ä–∏ spawn
    #[func]
    pub fn setup(&mut self, shooter_raw: i64, direction: Vector3, speed: f32, damage: i64) {
        self.shooter = Entity::from_raw(shooter_raw as u32);
        self.direction = direction.normalized();
        self.speed = speed;
        self.damage = damage as u32;

        voidrun_simulation::log(&format!(
            "Projectile setup: shooter={:?} dir={:?} speed={} dmg={}",
            self.shooter, self.direction, self.speed, self.damage
        ));
    }
}
