//! Target selection and weapon aim systems.

use bevy::prelude::*;
use godot::prelude::*;
use godot::classes::Node3D;
use voidrun_simulation::*;
use crate::shared::VisualRegistry;
use voidrun_simulation::logger;
// ============================================================================
// Systems: Target Switching + Aim
// ============================================================================

/// System: Dynamic target switching (SlowUpdate schedule, 0.3 Hz)
///
/// –î–ª—è –í–°–ï–• –∞–∫—Ç–æ—Ä–æ–≤ –≤ AIState::Combat:
/// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –í–ò–î–ò–ú–û–ì–û –≤—Ä–∞–≥–∞ –∏–∑ SpottedEnemies (VisionCone + LOS raycast)
/// - –ï—Å–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –≤—Ä–∞–≥ ‚â† —Ç–µ–∫—É—â–∏–π target ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç target
///
/// **–†–µ–∑—É–ª—å—Ç–∞—Ç:** AI –≤—Å–µ–≥–¥–∞ –∞—Ç–∞–∫—É–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –≤—Ä–∞–≥–∞ (dynamic target prioritization)
///
/// **Schedule:** SlowUpdate (0.3 Hz = ~3 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É)
/// - –≠–∫–æ–Ω–æ–º–∏—è CPU (–Ω–µ –Ω—É–∂–Ω–æ –∫–∞–∂–¥—ã–π frame)
/// - –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ AI (–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ ~0.3—Å)
/// - –ò–∑–±–µ–≥–∞–µ–º "perfect play" —ç—Ñ—Ñ–µ–∫—Ç (instant target switching)
///
/// –í–ê–ñ–ù–û: –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç WeaponFireIntent events (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
pub fn update_combat_targets_main_thread(
    mut actors: Query<(Entity, &Actor, &mut ai::AIState, &ai::SpottedEnemies), With<Actor>>,
    all_actors: Query<&Actor>,
    visuals: NonSend<VisualRegistry>,
    scene_root: NonSend<crate::shared::SceneRoot>,
) {

    // –ü–æ–ª—É—á–∞–µ–º PhysicsDirectSpaceState3D –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–æ—Ä–æ–≤
    let world = scene_root.node.get_world_3d();
    let Some(mut world) = world else {
        return;
    };

    let space = world.get_direct_space_state();
    let Some(mut space) = space else {
        return;
    };

    for (entity, actor, mut ai_state, spotted_enemies) in actors.iter_mut() {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Combat state
        let ai::AIState::Combat { target: current_target } = ai_state.as_ref() else {
            continue;
        };

        // –ü–æ–ª—É—á–∞–µ–º shooter node –¥–ª—è distance calculation
        let Some(shooter_node) = visuals.visuals.get(&entity) else {
            continue;
        };

        let shooter_pos = shooter_node.get_global_position();
        let shooter_eye = shooter_pos + Vector3::new(0.0, 0.8, 0.0); // Eye level

        // –ò—â–µ–º –ë–õ–ò–ñ–ê–ô–®–ï–ì–û –í–ò–î–ò–ú–û–ì–û –≤—Ä–∞–≥–∞ –∏–∑ SpottedEnemies
        let mut closest_visible_enemy: Option<(Entity, f32)> = None;

        for &enemy_entity in &spotted_enemies.enemies {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–∞–≥ –∂–∏–≤ (–µ—Å—Ç—å –≤ actors)
            let Ok(enemy_actor) = all_actors.get(enemy_entity) else {
                continue;
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º faction (—Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–∏)
            if enemy_actor.faction_id == actor.faction_id {
                continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º Godot node –¥–ª—è distance + LOS check
            let Some(enemy_node) = visuals.visuals.get(&enemy_entity) else {
                continue;
            };

            let enemy_pos = enemy_node.get_global_position();
            let distance_to_enemy = (enemy_pos - shooter_pos).length();

            // ‚úÖ LOS CHECK: raycast –æ—Ç shooter –∫ enemy (eye-level)
            let enemy_eye = enemy_pos + Vector3::new(0.0, 0.8, 0.0);

            let query_params = godot::classes::PhysicsRayQueryParameters3D::create(shooter_eye, enemy_eye);
            let Some(mut query) = query_params else {
                continue;
            };

            query.set_collision_mask(crate::shared::collision::COLLISION_MASK_RAYCAST_LOS);
            let empty_array = godot::prelude::Array::new();
            query.set_exclude(&empty_array);

            let result = space.intersect_ray(&query);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç raycast
            if result.is_empty() {
                // –ù–µ—Ç –∫–æ–ª–ª–∏–∑–∏–π ‚Üí —Å—Ç—Ä–∞–Ω–Ω–æ, skip
                continue;
            }

            let Some(collider_variant) = result.get("collider") else {
                continue;
            };

            let Ok(collider_node) = collider_variant.try_to::<Gd<godot::classes::Node>>() else {
                continue;
            };

            let collider_id = collider_node.instance_id();
            let enemy_instance_id = enemy_node.instance_id();

            // –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –ù–ï –≤ enemy ‚Üí LOS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, skip
            if collider_id != enemy_instance_id {
                continue;
            }

            // ‚úÖ –í–†–ê–ì –í–ò–î–ò–ú! –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ
            if let Some((_, current_min_dist)) = closest_visible_enemy {
                if distance_to_enemy < current_min_dist {
                    closest_visible_enemy = Some((enemy_entity, distance_to_enemy));
                }
            } else {
                closest_visible_enemy = Some((enemy_entity, distance_to_enemy));
            }
        }

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –∏ –æ–Ω –ù–ï —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É target ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
        if let Some((closest_entity, closest_distance)) = closest_visible_enemy {
            if closest_entity != *current_target {
                // ‚úÖ –ó–ê–ú–ï–ù–Ø–ï–ú TARGET –≤ AIState::Combat
                if let ai::AIState::Combat { ref mut target } = ai_state.as_mut() {
                    let old_target = *target;
                    *target = closest_entity;

                    logger::log(&format!(
                        "üéØ TARGET SWITCH (closest visible): {:?} switches from {:?} to {:?} at {:.1}m",
                        entity, old_target, closest_entity, closest_distance
                    ));
                }
            }
        }
    }

}

/// System: Aim weapon at target (RightHand rotation)
/// –ï—Å–ª–∏ –∞–∫—Ç—ë—Ä –≤ Combat state ‚Üí –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä—É–∫—É –∫ target
///
/// –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Godot Transform –∏–∑ VisualRegistry (–Ω–µ ECS Transform!)
pub fn weapon_aim_main_thread(
    actors: Query<(Entity, &ai::AIState), With<Actor>>,
    visuals: NonSend<VisualRegistry>,
) {
    for (entity, state) in actors.iter() {
        // –¶–µ–ª–∏–º—Å—è —Ç–æ–ª—å–∫–æ –≤ Combat state
        if let ai::AIState::Combat { target } = state {
            // –ü–æ–ª—É—á–∞–µ–º actor node (shooter)
            let Some(mut actor_node) = visuals.visuals.get(&entity).cloned() else {
                continue;
            };

            // –ü–æ–ª—É—á–∞–µ–º target node (–ù–ï ECS Transform ‚Äî Godot Transform!)
            let Some(target_node) = visuals.visuals.get(target).cloned() else {
                continue;
            };

            // Godot positions (tactical layer ‚Äî authoritative –¥–ª—è aim)
            let target_pos = target_node.get_global_position();
            let actor_pos = actor_node.get_global_position();
            let to_target = target_pos - actor_pos;

            if to_target.length() > 0.01 {
                // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å actor body –∫ target
                actor_node.look_at(target_pos);

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º RightHand (–æ—Ä—É–∂–∏–µ) –∫ target –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
                if let Some(mut right_hand) = actor_node.try_get_node_as::<Node3D>("RightHand") {
                    right_hand.look_at(target_pos);
                }
            }
        }
    }
}
