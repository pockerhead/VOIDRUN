//! FSM AI systems (state transitions, spotted enemies tracking).

use bevy::prelude::*;
use crate::components::{Actor, Health, Stamina};
use crate::ai::{GodotAIEvent, AIState, SpottedEnemies, AIConfig};

/// –°–∏—Å—Ç–µ–º–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SpottedEnemies –∏–∑ GodotAIEvent
///
/// –ß–∏—Ç–∞–µ—Ç ActorSpotted/ActorLost events ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç SpottedEnemies –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
/// –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç –º—ë—Ä—Ç–≤—ã–µ entities –∏–∑ —Å–ø–∏—Å–∫–∞ (VisionCone –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ActorLost –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏).
/// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ—Ä–∞–∫—Ü–∏—è–º: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–æ–≤ (—Ä–∞–∑–Ω—ã–µ faction_id).
pub fn update_spotted_enemies(
    mut ai_query: Query<(&mut SpottedEnemies, &Actor)>,
    mut ai_events: EventReader<GodotAIEvent>,
    actors: Query<&Actor>, // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Actor –ø–æ Entity
    potential_targets: Query<&Health>, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ target –∂–∏–≤
) {
    for event in ai_events.read() {
        match event {
            GodotAIEvent::EnemyWindupVisible { .. } => {
                // Skip: handled by ai_melee_combat_decision system
                continue;
            }
            GodotAIEvent::ActorSpotted { observer, target } => {
                // –ü–æ–ª—É—á–∞–µ–º observer actor
                let Ok((mut spotted, observer_actor)) = ai_query.get_mut(*observer) else {
                    continue;
                };

                // –ü–æ–ª—É—á–∞–µ–º target actor —á–µ—Ä–µ–∑ Query::get (O(1) lookup)
                let Ok(target_actor) = actors.get(*target) else {
                    continue;
                };

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–æ–≤
                if observer_actor.faction_id == target_actor.faction_id {
                    // –°–æ—é–∑–Ω–∏–∫ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    continue;
                }

                // –í—Ä–∞–≥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if !spotted.enemies.contains(target) {
                    spotted.enemies.push(*target);
                    crate::log(&format!(
                        "üëÅÔ∏è ActorSpotted: {:?} spotted enemy {:?} (faction {} vs {})",
                        observer, target, observer_actor.faction_id, target_actor.faction_id
                    ));
                }
            }
            GodotAIEvent::ActorLost { observer, target } => {
                if let Ok((mut spotted, _)) = ai_query.get_mut(*observer) {
                    let was_present = spotted.enemies.contains(target);
                    spotted.enemies.retain(|&e| e != *target);
                    if was_present {
                        crate::log(&format!(
                            "üëª ActorLost: {:?} lost sight of {:?} (removed from SpottedEnemies)",
                            observer, target
                        ));
                    }
                }
            }
        }
    }

    // –û—á–∏—â–∞–µ–º –º—ë—Ä—Ç–≤—ã–µ entities –∏–∑ –≤—Å–µ—Ö SpottedEnemies
    for (mut spotted, _) in ai_query.iter_mut() {
        let initial_count = spotted.enemies.len();
        spotted.enemies.retain(|&e| {
            potential_targets
                .get(e)
                .map(|h| h.is_alive())
                .unwrap_or(false) // –ï—Å–ª–∏ entity despawned –∏–ª–∏ –Ω–µ—Ç Health ‚Äî —É–¥–∞–ª—è–µ–º
        });

        let removed_count = initial_count - spotted.enemies.len();
        if removed_count > 0 {
            crate::log(&format!("AI: Removed {} dead/invalid targets from SpottedEnemies", removed_count));
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: AI FSM transitions (event-driven)
///
/// –û–±–Ω–æ–≤–ª—è–µ—Ç AIState –Ω–∞ –æ—Å–Ω–æ–≤–µ SpottedEnemies, health, stamina.
/// –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:
/// 1. Retreat (–µ—Å–ª–∏ low health/stamina)
/// 2. Combat (–µ—Å–ª–∏ –µ—Å—Ç—å spotted enemies)
/// 3. Patrol (–µ—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏–º)
///
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç StrategicPosition –¥–ª—è AI decisions (–Ω–µ Godot Transform)
pub fn ai_fsm_transitions(
    mut ai_query: Query<(
        Entity,
        &mut AIState,
        &mut SpottedEnemies,
        &AIConfig,
        &Health,
        &Stamina,
        &crate::StrategicPosition,
        Option<&crate::combat::MeleeAttackState>, // Check if in attack animation
    )>,
    potential_targets: Query<&Health>, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ target –∂–∏–≤
    time: Res<Time<Fixed>>,
) {
    let delta = time.delta_secs();

    for (entity, mut state, mut spotted, config, health, stamina, strategic_pos, melee_attack_state) in ai_query.iter_mut() {
        let stamina_percent = stamina.current / stamina.max;
        let health_percent = health.current as f32 / health.max as f32;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç—Å—Ç—É–ø–∏—Ç—å
        // ‚ö†Ô∏è –ù–ï –æ—Ç—Å—Ç—É–ø–∞–µ–º –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞—Ç–∞–∫–∏ (MeleeAttackState active)!
        let should_retreat = melee_attack_state.is_none()
            && (stamina_percent < config.retreat_stamina_threshold
                || health_percent < config.retreat_health_threshold);

        let new_state = match state.as_ref() {
            AIState::Dead => {
                // Dead state ‚Äî –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
                continue;
            }

            AIState::Idle => {
                // Idle ‚Üí Patrol (–Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞—Ç—å)
                crate::log(&format!("AI: {:?} Idle ‚Üí Patrol", entity));
                AIState::Patrol {
                    next_direction_timer: config.patrol_direction_change_interval,
                    target_position: None, // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ ai_movement_from_state
                }
            }

            AIState::Patrol { next_direction_timer, target_position } => {
                // –ï—Å–ª–∏ spotted enemy ‚Üí Combat
                if let Some(&target) = spotted.enemies.first() {
                    crate::log(&format!("üîç {:?} Patrol: spotted {} enemies, first = {:?}", entity, spotted.enemies.len(), target));
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –∂–∏–≤
                    if let Ok(target_health) = potential_targets.get(target) {
                        if target_health.is_alive() {
                            crate::log(&format!("‚öîÔ∏è {:?} Patrol ‚Üí Combat (target {:?})", entity, target));
                            AIState::Combat { target }
                        } else {
                            // Target –º–µ—Ä—Ç–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ç—Ä—É–ª—å
                            AIState::Patrol {
                                next_direction_timer: *next_direction_timer,
                                target_position: *target_position,
                            }
                        }
                    } else {
                        AIState::Patrol {
                            next_direction_timer: *next_direction_timer,
                            target_position: *target_position,
                        }
                    }
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ç—Ä—É–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                    let new_timer = (*next_direction_timer - delta).max(0.0);

                    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é patrol —Ç–æ—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition)
                    let new_target = if new_timer <= 0.0 {
                        use rand::Rng;
                        let mut rng = rand::thread_rng();

                        let angle = rng.gen::<f32>() * std::f32::consts::TAU;
                        let distance = 5.0 + rng.gen::<f32>() * 10.0; // 5-15–º radius

                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π strategic position
                        let current_world_pos = strategic_pos.to_world_position(0.5);
                        let offset = Vec3::new(angle.cos() * distance, 0.0, angle.sin() * distance);
                        let patrol_target = current_world_pos + offset;

                        // –¥–ª—è —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤—Å–µ–≥–¥–∞ —Å -z –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                        // let patrol_target = Vec3::new(current_world_pos.x, current_world_pos.y, -current_world_pos.z);
                        Some(patrol_target)
                    } else {
                        *target_position
                    };

                    AIState::Patrol {
                        next_direction_timer: if new_timer <= 0.0 {
                            config.patrol_direction_change_interval
                        } else {
                            new_timer
                        },
                        target_position: new_target,
                    }
                }
            }

            AIState::Combat { target } => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º retreat conditions
                if should_retreat {
                    crate::log(&format!("AI: {:?} Combat ‚Üí Retreat (low hp/stamina)", entity));
                    AIState::Retreat {
                        timer: config.retreat_duration,
                        from_target: Some(*target),
                    }
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –µ—â–µ spotted –∏ –∂–∏–≤
                    let target_valid = spotted.enemies.contains(target)
                        && potential_targets
                            .get(*target)
                            .map(|h| h.is_alive())
                            .unwrap_or(false);

                    if !target_valid {
                        // Target –ø–æ—Ç–µ—Ä—è–Ω –∏–ª–∏ –º–µ—Ä—Ç–≤ ‚Üí –∏—â–µ–º –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –ø–∞—Ç—Ä—É–ª—å
                        crate::log(&format!("‚ùå {:?} Combat: target {:?} INVALID (in spotted: {}, alive: {})",
                            entity, target,
                            spotted.enemies.contains(target),
                            potential_targets.get(*target).map(|h| h.is_alive()).unwrap_or(false)
                        ));
                        if let Some(&new_target) = spotted.enemies.first() {
                            crate::log(&format!("üîÑ {:?} Combat: target lost, switching to {:?}", entity, new_target));
                            AIState::Combat { target: new_target }
                        } else {
                            crate::log(&format!("üö∂ {:?} Combat ‚Üí Patrol (no targets in SpottedEnemies)", entity));
                            AIState::Patrol {
                                next_direction_timer: config.patrol_direction_change_interval,
                                target_position: None,
                            }
                        }
                    } else {
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
                        AIState::Combat { target: *target }
                    }
                }
            }

            AIState::Retreat { timer, from_target } => {
                let new_timer = (*timer - delta).max(0.0);

                if new_timer <= 0.0 {
                    // Retreat –∑–∞–∫–æ–Ω—á–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Combat

                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ from_target (–¥–∞–∂–µ –µ—Å–ª–∏ VisionCone –ø–æ—Ç–µ—Ä—è–ª)
                    if let Some(target) = from_target {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –≤—Å—ë –µ—â—ë –∂–∏–≤
                        if potential_targets.get(*target).map(|h| h.is_alive()).unwrap_or(false) {
                            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º from_target –æ–±—Ä–∞—Ç–Ω–æ –≤ SpottedEnemies (VisionCone –º–æ–≥ –ø–æ—Ç–µ—Ä—è—Ç—å –≤–æ –≤—Ä–µ–º—è retreat)
                            if !spotted.enemies.contains(target) {
                                spotted.enemies.push(*target);
                                crate::log(&format!("üîÑ {:?} re-adding from_target {:?} to SpottedEnemies (lost during Retreat)", entity, target));
                            }
                            crate::log(&format!("AI: {:?} Retreat ‚Üí Combat (return to from_target {:?})", entity, target));
                            AIState::Combat { target: *target }
                        } else {
                            // from_target –º—ë—Ä—Ç–≤ ‚Äî –∏—â–µ–º –¥—Ä—É–≥–æ–≥–æ spotted enemy
                            if let Some(&new_target) = spotted.enemies.first() {
                                crate::log(&format!("AI: {:?} Retreat ‚Üí Combat (from_target dead, switching to {:?})", entity, new_target));
                                AIState::Combat { target: new_target }
                            } else {
                                // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Üí Patrol
                                crate::log(&format!("AI: {:?} Retreat ‚Üí Patrol (no targets)", entity));
                                AIState::Patrol {
                                    next_direction_timer: config.patrol_direction_change_interval,
                                    target_position: None,
                                }
                            }
                        }
                    } else {
                        // –ù–µ—Ç from_target ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º spotted enemies
                        if let Some(&target) = spotted.enemies.first() {
                            crate::log(&format!("AI: {:?} Retreat ‚Üí Combat (spotted enemy)", entity));
                            AIState::Combat { target }
                        } else {
                            // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Üí Patrol
                            crate::log(&format!("AI: {:?} Retreat ‚Üí Patrol (no targets)", entity));
                            AIState::Patrol {
                                next_direction_timer: config.patrol_direction_change_interval,
                                target_position: None,
                            }
                        }
                    }
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º retreat
                    AIState::Retreat {
                        timer: new_timer,
                        from_target: *from_target,
                    }
                }
            }
        };

        if *state != new_state {
            *state = new_state;
        }
    }
}
