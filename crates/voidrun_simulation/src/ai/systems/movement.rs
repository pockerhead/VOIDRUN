//! AI movement systems.

use bevy::prelude::*;
use crate::components::{Actor, MovementCommand, Stamina};
use crate::combat::WeaponStats;
use crate::ai::AIState;

/// –°–∏—Å—Ç–µ–º–∞: AI movement from state
///
/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç AIState ‚Üí MovementCommand –¥–ª—è Godot.
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition –¥–ª—è AI decisions
pub fn ai_movement_from_state(
    mut ai_query: Query<(&AIState, &mut MovementCommand, &crate::StrategicPosition)>,
    _targets_query: Query<&crate::StrategicPosition>,
) {
    for (state, mut command, _strategic_pos) in ai_query.iter_mut() {
        match state {
            AIState::Dead => {
                // Dead ‚Äî –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
                if !matches!(*command, MovementCommand::Idle) {
                    *command = MovementCommand::Idle;
                }
            }

            AIState::Idle => {
                if !matches!(*command, MovementCommand::Idle) {
                    *command = MovementCommand::Idle;
                }
            }

            AIState::Patrol { target_position, .. } => {
                // –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π patrol —Ç–æ—á–∫–µ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ ai_fsm_transitions)
                if let Some(target) = target_position {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –∏–Ω–∞—á–µ Changed<MovementCommand> —Å–ø–∞–º–∏—Ç
                    if !matches!(*command, MovementCommand::MoveToPosition { target: t } if t == *target) {
                        *command = MovementCommand::MoveToPosition {
                            target: *target,
                        };
                    }
                } else {
                    // –ù–µ—Ç target –ø–æ–∑–∏—Ü–∏–∏ ‚Üí Idle (–±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ)
                    if !matches!(*command, MovementCommand::Idle) {
                        *command = MovementCommand::Idle;
                    }
                }
            }

            AIState::Combat { target } => {
                // –°–ª–µ–¥—É–µ–º –∑–∞ target (FollowEntity –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
                if !matches!(*command, MovementCommand::FollowEntity { target: t } if t == *target) {
                    crate::log(&format!("üèÉ AI movement: Combat ‚Üí FollowEntity {:?}", target));
                    *command = MovementCommand::FollowEntity {
                        target: *target,
                    };
                }
            }

            AIState::Retreat { from_target, .. } => {
                // –¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ: –ø—è—Ç–∏—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤—Ä–∞–≥–∞
                let Some(target_entity) = from_target else {
                    if !matches!(*command, MovementCommand::Idle) {
                        *command = MovementCommand::Idle;
                    }
                    continue;
                };

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º RetreatFrom –¥–ª—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è
                if !matches!(*command, MovementCommand::RetreatFrom { target: t } if t == *target_entity) {
                    *command = MovementCommand::RetreatFrom {
                        target: *target_entity,
                    };
                }
            }
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: AI attack execution
///
/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ç–∞–∫–∏ –∫–æ–≥–¥–∞ –≤ Combat state –∏ target –≤ —Ä–∞–¥–∏—É—Å–µ.
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition –¥–ª—è distance checks
pub fn ai_attack_execution(
    mut ai_query: Query<(&AIState, &crate::StrategicPosition, &mut WeaponStats, &Stamina)>,
    targets_query: Query<&crate::StrategicPosition>,
    time: Res<Time<Fixed>>,
) {
    let delta = time.delta_secs();

    for (state, strategic_pos, mut weapon, stamina) in ai_query.iter_mut() {
        // –û–±–Ω–æ–≤–ª—è–µ–º cooldown
        if weapon.cooldown_timer > 0.0 {
            weapon.cooldown_timer -= delta;
        }

        // –ê—Ç–∞–∫—É–µ–º —Ç–æ–ª—å–∫–æ –≤ Combat state
        let AIState::Combat { target } = state else {
            continue;
        };

        let Ok(target_strategic_pos) = targets_query.get(*target) else {
            continue;
        };

        let current_world_pos = strategic_pos.to_world_position(0.5);
        let target_world_pos = target_strategic_pos.to_world_position(0.5);
        let distance = current_world_pos.distance(target_world_pos);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤ —Ä–∞–¥–∏—É—Å–µ, cooldown –≥–æ—Ç–æ–≤, –µ—Å—Ç—å stamina
        const ATTACK_COST: f32 = 20.0;
        if distance <= weapon.attack_radius
            && weapon.cooldown_timer <= 0.0
            && stamina.current >= ATTACK_COST
        {
            // –ê—Ç–∞–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É (combat systems –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç)
            // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º cooldown
            weapon.cooldown_timer = weapon.attack_cooldown;

            crate::log(&format!("AI: attacking target {:?}", target));
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: collision resolution (–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ NPC –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞)
///
/// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—ç–∫–∏–Ω–≥ actors –Ω–∞ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ.
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition, Godot –æ–±–Ω–æ–≤–∏—Ç –≤–∏–∑—É–∞–ª—ã —á–µ—Ä–µ–∑ PostSpawn
pub fn simple_collision_resolution(
    mut actors: Query<(&mut crate::StrategicPosition, Entity), With<Actor>>,
) {
    let positions: Vec<(Entity, Vec3)> = actors
        .iter()
        .map(|(sp, e)| (e, sp.to_world_position(0.5)))
        .collect();

    for (mut strategic_pos, entity) in actors.iter_mut() {
        let mut push = Vec3::ZERO;
        let current_pos = strategic_pos.to_world_position(0.5);

        for &(other_entity, other_pos) in &positions {
            if other_entity == entity {
                continue;
            }

            let diff = current_pos - other_pos;
            let distance = diff.length();

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É actors
            const MIN_DISTANCE: f32 = 1.0;

            if distance < MIN_DISTANCE && distance > 0.001 {
                let push_force = (MIN_DISTANCE - distance) / MIN_DISTANCE;
                push += diff.normalize() * push_force * 0.1;
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º push –∫ StrategicPosition
        if push.length() > 0.001 {
            let new_pos = current_pos + push;
            *strategic_pos = crate::StrategicPosition::from_world_position(new_pos);
        }
    }
}
