//! AI reaction systems (death, damage, gunfire).

use bevy::prelude::*;
use crate::components::{Actor, MovementCommand};
use crate::ai::{AIState, SpottedEnemies, GodotAIEvent};

/// System: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ AI –≤ Dead state
///
/// –ü—Ä–∏ HP == 0 –æ—Ç–∫–ª—é—á–∞–µ–º AI (Dead state) —á—Ç–æ–±—ã –º–µ—Ä—Ç–≤—ã–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏/–¥–≤–∏–≥–∞–ª–∏—Å—å
pub fn handle_actor_death(
    mut actors: Query<(&crate::Health, &mut AIState), Changed<crate::Health>>,
) {
    for (health, mut state) in actors.iter_mut() {
        if health.current == 0 && !matches!(*state, AIState::Dead) {
            *state = AIState::Dead;
            crate::logger::log("Actor died ‚Üí AI disabled (Dead state)");
        }
    }
}

/// System: AI —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
///
/// –ï—Å–ª–∏ –∞–∫—Ç–æ—Ä–∞ —É–¥–∞—Ä–∏–ª–∏, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
/// - –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ç–∞–∫—É—é—â–µ–≥–æ –≤ SpottedEnemies (–µ—Å–ª–∏ –≤—Ä–∞–≥)
/// - –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ –∞—Ç–∞–∫—É—é—â–µ–º—É (—á–µ—Ä–µ–∑ MovementCommand::FollowEntity)
/// - FSM –ø–µ—Ä–µ–π–¥—ë—Ç –≤ Combat –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ —á–µ—Ä–µ–∑ ai_fsm_transitions
///
/// –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é "—É–¥–∞—Ä–∏–ª–∏ –≤ —Å–ø–∏–Ω—É ‚Üí —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –∏ –¥–µ—Ä—ë—à—å—Å—è"
pub fn react_to_damage(
    mut damage_events: EventReader<crate::combat::DamageDealt>,
    mut actors: Query<(&Actor, &mut SpottedEnemies, &mut MovementCommand)>,
    attackers: Query<&Actor>,
) {
    for damage_event in damage_events.read() {
        // –ü–æ–ª—É—á–∞–µ–º victim actor
        let Ok((victim_actor, mut spotted_enemies, mut command)) = actors.get_mut(damage_event.target) else {
            continue;
        };

        // –ü–æ–ª—É—á–∞–µ–º attacker actor
        let Ok(attacker_actor) = attackers.get(damage_event.attacker) else {
            continue;
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏: —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–∞–≥–æ–≤
        if victim_actor.faction_id == attacker_actor.faction_id {
            // Friendly fire ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É)
            continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ –≤ SpottedEnemies (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Ç–∞–º)
        if !spotted_enemies.enemies.contains(&damage_event.attacker) {
            spotted_enemies.enemies.push(damage_event.attacker);
            crate::logger::log(&format!(
                "‚ö†Ô∏è {:?} damaged by {:?} ‚Üí added to SpottedEnemies",
                damage_event.target, damage_event.attacker
            ));
        }

        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –∫ –∞—Ç–∞–∫—É—é—â–µ–º—É (FollowEntity –¥–∞—Å—Ç NavigationAgent3D —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è)
        *command = MovementCommand::FollowEntity {
            target: damage_event.attacker,
        };

        crate::logger::log(&format!(
            "üî• {:?} hit by {:?} ‚Üí following attacker",
            damage_event.target, damage_event.attacker
        ));
    }
}

/// System: AI —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∑–≤—É–∫ –≤—ã—Å—Ç—Ä–µ–ª–∞
///
/// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
/// - –°–ª—É—à–∞–µ—Ç WeaponFired —Å–æ–±—ã—Ç–∏—è (—Å–æ–¥–µ—Ä–∂–∞—Ç shooter_position + hearing_range)
/// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ StrategicPosition (chunk-aware distance)
/// - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ActorSpotted event –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "—É—Å–ª—ã—à–∞–ª —Å—Ç—Ä–µ–ª—è–≤—à–µ–≥–æ"
/// - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MovementCommand –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤—ã—Å—Ç—Ä–µ–ª–∞ —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º 3–º
///
/// –õ–æ–≥–∏–∫–∞:
/// - –í—Å–µ –∞–∫—Ç—ë—Ä—ã –≤ —Ä–∞–¥–∏—É—Å–µ —Å–ª—ã—à–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª (—Å–æ—é–∑–Ω–∏–∫–∏, –≤—Ä–∞–≥–∏, –Ω–µ–π—Ç—Ä–∞–ª—ã)
/// - Skip: —Å–∞–º —Å—Ç—Ä–µ–ª—è–≤—à–∏–π, –∞–∫—Ç—ë—Ä—ã —É–∂–µ –≤ Combat (—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ —Å–≤–æ–µ–π —Ü–µ–ª–∏)
/// - –†–∞–¥–∏—É—Å —Å–ª—ã—à–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ä—É–∂–∏—è (pistol ~25–º, rifle ~40–º, sniper ~60–º)
pub fn ai_react_to_gunfire(
    mut gunfire_events: EventReader<crate::combat::WeaponFired>,
    mut actors: Query<(Entity, &Actor, &crate::StrategicPosition, &AIState, &mut MovementCommand)>,
    mut spotted_events: EventWriter<GodotAIEvent>,
) {
    use rand::Rng;
    let mut rng = rand::thread_rng();

    for fire_event in gunfire_events.read() {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º world position ‚Üí StrategicPosition –¥–ª—è distance check
        let shooter_strategic = crate::StrategicPosition::from_world_position(
            fire_event.shooter_position
        );

        for (listener_entity, _listener_actor, listener_pos, ai_state, mut command) in actors.iter_mut() {
            // Skip: —Å–∞–º —Å—Ç—Ä–µ–ª—è–≤—à–∏–π
            if listener_entity == fire_event.shooter {
                continue;
            }

            // Skip: —É–∂–µ –≤ Combat (—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω –Ω–∞ —Å–≤–æ–µ–π —Ü–µ–ª–∏, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç—Å—è)
            if matches!(ai_state, AIState::Combat { .. }) {
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (chunk-aware distance —á–µ—Ä–µ–∑ world positions)
            let listener_world_pos = listener_pos.to_world_position(0.5);
            let shooter_world_pos = shooter_strategic.to_world_position(0.5);
            let distance = listener_world_pos.distance(shooter_world_pos);

            if distance > fire_event.hearing_range {
                continue;
            }

            // ‚úÖ –£—Å–ª—ã—à–∞–ª –≤—ã—Å—Ç—Ä–µ–ª!
            crate::logger::log(&format!(
                "üîä Entity {:?} heard gunfire from {:?} at distance {:.1}m (range: {:.1}m)",
                listener_entity, fire_event.shooter, distance, fire_event.hearing_range
            ));

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ActorSpotted (–∏–º–∏—Ç–∞—Ü–∏—è "—É—Å–ª—ã—à–∞–ª –∏ –∑–∞–º–µ—Ç–∏–ª —Å—Ç—Ä–µ–ª—è–≤—à–µ–≥–æ")
            spotted_events.write(GodotAIEvent::ActorSpotted {
                observer: listener_entity,
                target: fire_event.shooter,
            });

            // –ò–¥—ë–º –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤—ã—Å—Ç—Ä–µ–ª–∞ —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º 3–º (–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
            let random_offset = Vec3::new(
                rng.gen_range(-1.0..1.0), // -1..1
                0.0,
                rng.gen_range(-1.0..1.0),
            ) * 3.0; // 3–º —Ä–∞–∑–±—Ä–æ—Å

            let investigate_pos = fire_event.shooter_position + random_offset;
            *command = MovementCommand::MoveToPosition {
                target: investigate_pos,
            };

            crate::logger::log(&format!(
                "  ‚Üí Entity {:?} moving to investigate gunfire at {:?}",
                listener_entity, investigate_pos
            ));
        }
    }
}
