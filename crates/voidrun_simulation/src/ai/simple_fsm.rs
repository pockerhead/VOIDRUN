//! Simple FSM AI –¥–ª—è combat (Godot-driven architecture)
//!
//! ECS –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
//! - State machine logic (Idle ‚Üí Patrol ‚Üí Combat)
//! - Decisions (–∫–æ–≥–¥–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –∫—É–¥–∞ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞—Ç—å)
//! - Target tracking (–∫—Ç–æ –∫–æ–≥–æ –≤–∏–¥–∏—Ç)
//!
//! Godot –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
//! - VisionCone (Area3D) ‚Üí GodotAIEvent (ActorSpotted/ActorLost)
//! - Pathfinding (NavigationAgent3D)
//! - Movement execution (CharacterBody3D)
//!
//! Architecture: ADR-005 (Godot authoritative), event-driven AI

use bevy::prelude::*;
use crate::components::{Actor, Health, Stamina, MovementCommand};
use crate::combat::WeaponStats;
use crate::ai::GodotAIEvent;

/// AI FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è (event-driven)
#[derive(Component, Debug, Clone, PartialEq, Reflect)]
#[reflect(Component)]
pub enum AIState {
    /// Idle ‚Äî –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
    Idle,

    /// Patrol ‚Äî —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø–æ–∏—Å–∫–∞—Ö –≤—Ä–∞–≥–æ–≤
    Patrol {
        /// –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        next_direction_timer: f32,
        /// –¢–µ–∫—É—â–∞—è target –ø–æ–∑–∏—Ü–∏—è –ø–∞—Ç—Ä—É–ª—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ)
        target_position: Option<Vec3>,
    },

    /// Combat ‚Äî –±–æ–π —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º –≤—Ä–∞–≥–æ–º
    Combat {
        target: Entity,
    },

    /// Retreat ‚Äî –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    Retreat {
        /// –í—Ä–µ–º—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
        timer: f32,
        /// –û—Ç –∫–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        from_target: Option<Entity>,
    },

    /// Dead ‚Äî –∞–∫—Ç—ë—Ä –º–µ—Ä—Ç–≤ (HP == 0), AI –æ—Ç–∫–ª—é—á–µ–Ω
    Dead,
}

impl Default for AIState {
    fn default() -> Self {
        Self::Idle
    }
}

/// Component: tracking spotted enemies (–æ—Ç GodotAIEvent)
///
/// –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ ActorSpotted/ActorLost events.
/// AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ target –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ spotted –≤—Ä–∞–≥–æ–≤.
#[derive(Component, Debug, Clone, Default, Reflect)]
#[reflect(Component)]
pub struct SpottedEnemies {
    pub enemies: Vec<Entity>,
}

/// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã AI
#[derive(Component, Debug, Clone, Reflect)]
#[reflect(Component)]
pub struct AIConfig {
    /// Stamina –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è (percent)
    pub retreat_stamina_threshold: f32,
    /// Health –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è (percent)
    pub retreat_health_threshold: f32,
    /// –í—Ä–µ–º—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
    pub retreat_duration: f32,
    /// Patrol: –≤—Ä–µ–º—è –º–µ–∂–¥—É —Å–º–µ–Ω–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
    pub patrol_direction_change_interval: f32,
}

impl Default for AIConfig {
    fn default() -> Self {
        Self {
            retreat_stamina_threshold: 0.3, // 30% stamina
            retreat_health_threshold: 0.2,  // 20% health
            retreat_duration: 2.0,
            patrol_direction_change_interval: 10.0, // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–±—ã–ª–æ 3 —Å–µ–∫)
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SpottedEnemies –∏–∑ GodotAIEvent
///
/// –ß–∏—Ç–∞–µ—Ç ActorSpotted/ActorLost events ‚Üí –æ–±–Ω–æ–≤–ª—è–µ—Ç SpottedEnemies –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
/// –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç –º—ë—Ä—Ç–≤—ã–µ entities –∏–∑ —Å–ø–∏—Å–∫–∞ (VisionCone –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ActorLost –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏).
/// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ—Ä–∞–∫—Ü–∏—è–º: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–æ–≤ (—Ä–∞–∑–Ω—ã–µ faction_id).
pub fn update_spotted_enemies(
    mut ai_query: Query<(&mut SpottedEnemies, &Actor)>,
    mut ai_events: EventReader<GodotAIEvent>,
    actors: Query<&Actor>, // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Actor –ø–æ Entity
    potential_targets: Query<&Health>, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ target –∂–∏–≤
) {
    for event in ai_events.read() {
        match event {
            GodotAIEvent::ActorSpotted { observer, target } => {
                // –ü–æ–ª—É—á–∞–µ–º observer actor
                let Ok((mut spotted, observer_actor)) = ai_query.get_mut(*observer) else {
                    continue;
                };

                // –ü–æ–ª—É—á–∞–µ–º target actor —á–µ—Ä–µ–∑ Query::get (O(1) lookup)
                let Ok(target_actor) = actors.get(*target) else {
                    continue;
                };

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–∞–≥–æ–≤
                if observer_actor.faction_id == target_actor.faction_id {
                    // –°–æ—é–∑–Ω–∏–∫ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    continue;
                }

                // –í—Ä–∞–≥ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if !spotted.enemies.contains(target) {
                    spotted.enemies.push(*target);
                    crate::log(&format!(
                        "üëÅÔ∏è ActorSpotted: {:?} spotted enemy {:?} (faction {} vs {})",
                        observer, target, observer_actor.faction_id, target_actor.faction_id
                    ));
                }
            }
            GodotAIEvent::ActorLost { observer, target } => {
                if let Ok((mut spotted, _)) = ai_query.get_mut(*observer) {
                    let was_present = spotted.enemies.contains(target);
                    spotted.enemies.retain(|&e| e != *target);
                    if was_present {
                        crate::log(&format!(
                            "üëª ActorLost: {:?} lost sight of {:?} (removed from SpottedEnemies)",
                            observer, target
                        ));
                    }
                }
            }
        }
    }

    // –û—á–∏—â–∞–µ–º –º—ë—Ä—Ç–≤—ã–µ entities –∏–∑ –≤—Å–µ—Ö SpottedEnemies
    for (mut spotted, _) in ai_query.iter_mut() {
        let initial_count = spotted.enemies.len();
        spotted.enemies.retain(|&e| {
            potential_targets
                .get(e)
                .map(|h| h.is_alive())
                .unwrap_or(false) // –ï—Å–ª–∏ entity despawned –∏–ª–∏ –Ω–µ—Ç Health ‚Äî —É–¥–∞–ª—è–µ–º
        });

        let removed_count = initial_count - spotted.enemies.len();
        if removed_count > 0 {
            crate::log(&format!("AI: Removed {} dead/invalid targets from SpottedEnemies", removed_count));
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: AI FSM transitions (event-driven)
///
/// –û–±–Ω–æ–≤–ª—è–µ—Ç AIState –Ω–∞ –æ—Å–Ω–æ–≤–µ SpottedEnemies, health, stamina.
/// –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤:
/// 1. Retreat (–µ—Å–ª–∏ low health/stamina)
/// 2. Combat (–µ—Å–ª–∏ –µ—Å—Ç—å spotted enemies)
/// 3. Patrol (–µ—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–¥–∏–º)
///
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç StrategicPosition –¥–ª—è AI decisions (–Ω–µ Godot Transform)
pub fn ai_fsm_transitions(
    mut ai_query: Query<(
        Entity,
        &mut AIState,
        &mut SpottedEnemies,
        &AIConfig,
        &Health,
        &Stamina,
        &crate::StrategicPosition,
        Option<&crate::combat::MeleeAttackState>, // Check if in attack animation
    )>,
    potential_targets: Query<&Health>, // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ target –∂–∏–≤
    time: Res<Time<Fixed>>,
) {
    let delta = time.delta_secs();

    for (entity, mut state, mut spotted, config, health, stamina, strategic_pos, melee_attack_state) in ai_query.iter_mut() {
        let stamina_percent = stamina.current / stamina.max;
        let health_percent = health.current as f32 / health.max as f32;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç—Å—Ç—É–ø–∏—Ç—å
        // ‚ö†Ô∏è –ù–ï –æ—Ç—Å—Ç—É–ø–∞–µ–º –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞—Ç–∞–∫–∏ (MeleeAttackState active)!
        let should_retreat = melee_attack_state.is_none()
            && (stamina_percent < config.retreat_stamina_threshold
                || health_percent < config.retreat_health_threshold);

        let new_state = match state.as_ref() {
            AIState::Dead => {
                // Dead state ‚Äî –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
                continue;
            }

            AIState::Idle => {
                // Idle ‚Üí Patrol (–Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞—Ç—å)
                crate::log(&format!("AI: {:?} Idle ‚Üí Patrol", entity));
                AIState::Patrol {
                    next_direction_timer: config.patrol_direction_change_interval,
                    target_position: None, // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ ai_movement_from_state
                }
            }

            AIState::Patrol { next_direction_timer, target_position } => {
                // –ï—Å–ª–∏ spotted enemy ‚Üí Combat
                if let Some(&target) = spotted.enemies.first() {
                    crate::log(&format!("üîç {:?} Patrol: spotted {} enemies, first = {:?}", entity, spotted.enemies.len(), target));
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –∂–∏–≤
                    if let Ok(target_health) = potential_targets.get(target) {
                        if target_health.is_alive() {
                            crate::log(&format!("‚öîÔ∏è {:?} Patrol ‚Üí Combat (target {:?})", entity, target));
                            AIState::Combat { target }
                        } else {
                            // Target –º–µ—Ä—Ç–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ç—Ä—É–ª—å
                            AIState::Patrol {
                                next_direction_timer: *next_direction_timer,
                                target_position: *target_position,
                            }
                        }
                    } else {
                        AIState::Patrol {
                            next_direction_timer: *next_direction_timer,
                            target_position: *target_position,
                        }
                    }
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ç—Ä—É–ª—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
                    let new_timer = (*next_direction_timer - delta).max(0.0);

                    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫ ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é patrol —Ç–æ—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition)
                    let new_target = if new_timer <= 0.0 {
                        use rand::Rng;
                        let mut rng = rand::thread_rng();

                        let angle = rng.gen::<f32>() * std::f32::consts::TAU;
                        let distance = 5.0 + rng.gen::<f32>() * 10.0; // 5-15–º radius

                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π strategic position
                        let current_world_pos = strategic_pos.to_world_position(0.5);
                        let offset = Vec3::new(angle.cos() * distance, 0.0, angle.sin() * distance);
                        let patrol_target = current_world_pos + offset;

                        // –¥–ª—è —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤—Å–µ–≥–¥–∞ —Å -z –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                        // let patrol_target = Vec3::new(current_world_pos.x, current_world_pos.y, -current_world_pos.z);
                        Some(patrol_target)
                    } else {
                        *target_position
                    };

                    AIState::Patrol {
                        next_direction_timer: if new_timer <= 0.0 {
                            config.patrol_direction_change_interval
                        } else {
                            new_timer
                        },
                        target_position: new_target,
                    }
                }
            }

            AIState::Combat { target } => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º retreat conditions
                if should_retreat {
                    crate::log(&format!("AI: {:?} Combat ‚Üí Retreat (low hp/stamina)", entity));
                    AIState::Retreat {
                        timer: config.retreat_duration,
                        from_target: Some(*target),
                    }
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –µ—â–µ spotted –∏ –∂–∏–≤
                    let target_valid = spotted.enemies.contains(target)
                        && potential_targets
                            .get(*target)
                            .map(|h| h.is_alive())
                            .unwrap_or(false);

                    if !target_valid {
                        // Target –ø–æ—Ç–µ—Ä—è–Ω –∏–ª–∏ –º–µ—Ä—Ç–≤ ‚Üí –∏—â–µ–º –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –ø–∞—Ç—Ä—É–ª—å
                        crate::log(&format!("‚ùå {:?} Combat: target {:?} INVALID (in spotted: {}, alive: {})",
                            entity, target,
                            spotted.enemies.contains(target),
                            potential_targets.get(*target).map(|h| h.is_alive()).unwrap_or(false)
                        ));
                        if let Some(&new_target) = spotted.enemies.first() {
                            crate::log(&format!("üîÑ {:?} Combat: target lost, switching to {:?}", entity, new_target));
                            AIState::Combat { target: new_target }
                        } else {
                            crate::log(&format!("üö∂ {:?} Combat ‚Üí Patrol (no targets in SpottedEnemies)", entity));
                            AIState::Patrol {
                                next_direction_timer: config.patrol_direction_change_interval,
                                target_position: None,
                            }
                        }
                    } else {
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
                        AIState::Combat { target: *target }
                    }
                }
            }

            AIState::Retreat { timer, from_target } => {
                let new_timer = (*timer - delta).max(0.0);

                if new_timer <= 0.0 {
                    // Retreat –∑–∞–∫–æ–Ω—á–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Combat

                    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ from_target (–¥–∞–∂–µ –µ—Å–ª–∏ VisionCone –ø–æ—Ç–µ—Ä—è–ª)
                    if let Some(target) = from_target {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target –≤—Å—ë –µ—â—ë –∂–∏–≤
                        if potential_targets.get(*target).map(|h| h.is_alive()).unwrap_or(false) {
                            // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º from_target –æ–±—Ä–∞—Ç–Ω–æ –≤ SpottedEnemies (VisionCone –º–æ–≥ –ø–æ—Ç–µ—Ä—è—Ç—å –≤–æ –≤—Ä–µ–º—è retreat)
                            if !spotted.enemies.contains(target) {
                                spotted.enemies.push(*target);
                                crate::log(&format!("üîÑ {:?} re-adding from_target {:?} to SpottedEnemies (lost during Retreat)", entity, target));
                            }
                            crate::log(&format!("AI: {:?} Retreat ‚Üí Combat (return to from_target {:?})", entity, target));
                            AIState::Combat { target: *target }
                        } else {
                            // from_target –º—ë—Ä—Ç–≤ ‚Äî –∏—â–µ–º –¥—Ä—É–≥–æ–≥–æ spotted enemy
                            if let Some(&new_target) = spotted.enemies.first() {
                                crate::log(&format!("AI: {:?} Retreat ‚Üí Combat (from_target dead, switching to {:?})", entity, new_target));
                                AIState::Combat { target: new_target }
                            } else {
                                // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Üí Patrol
                                crate::log(&format!("AI: {:?} Retreat ‚Üí Patrol (no targets)", entity));
                                AIState::Patrol {
                                    next_direction_timer: config.patrol_direction_change_interval,
                                    target_position: None,
                                }
                            }
                        }
                    } else {
                        // –ù–µ—Ç from_target ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º spotted enemies
                        if let Some(&target) = spotted.enemies.first() {
                            crate::log(&format!("AI: {:?} Retreat ‚Üí Combat (spotted enemy)", entity));
                            AIState::Combat { target }
                        } else {
                            // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç ‚Üí Patrol
                            crate::log(&format!("AI: {:?} Retreat ‚Üí Patrol (no targets)", entity));
                            AIState::Patrol {
                                next_direction_timer: config.patrol_direction_change_interval,
                                target_position: None,
                            }
                        }
                    }
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º retreat
                    AIState::Retreat {
                        timer: new_timer,
                        from_target: *from_target,
                    }
                }
            }
        };

        if *state != new_state {
            *state = new_state;
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: AI movement from state
///
/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç AIState ‚Üí MovementCommand –¥–ª—è Godot.
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition –¥–ª—è AI decisions
pub fn ai_movement_from_state(
    mut ai_query: Query<(&AIState, &mut MovementCommand, &crate::StrategicPosition)>,
    targets_query: Query<&crate::StrategicPosition>,
) {
    for (state, mut command, strategic_pos) in ai_query.iter_mut() {
        match state {
            AIState::Dead => {
                // Dead ‚Äî –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
                if !matches!(*command, MovementCommand::Idle) {
                    *command = MovementCommand::Idle;
                }
            }

            AIState::Idle => {
                if !matches!(*command, MovementCommand::Idle) {
                    *command = MovementCommand::Idle;
                }
            }

            AIState::Patrol { target_position, .. } => {
                // –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π patrol —Ç–æ—á–∫–µ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ ai_fsm_transitions)
                if let Some(target) = target_position {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî –∏–Ω–∞—á–µ Changed<MovementCommand> —Å–ø–∞–º–∏—Ç
                    if !matches!(*command, MovementCommand::MoveToPosition { target: t } if t == *target) {
                        *command = MovementCommand::MoveToPosition {
                            target: *target,
                        };
                    }
                } else {
                    // –ù–µ—Ç target –ø–æ–∑–∏—Ü–∏–∏ ‚Üí Idle (–±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ)
                    if !matches!(*command, MovementCommand::Idle) {
                        *command = MovementCommand::Idle;
                    }
                }
            }

            AIState::Combat { target } => {
                // –°–ª–µ–¥—É–µ–º –∑–∞ target (FollowEntity –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è)
                if !matches!(*command, MovementCommand::FollowEntity { target: t } if t == *target) {
                    crate::log(&format!("üèÉ AI movement: Combat ‚Üí FollowEntity {:?}", target));
                    *command = MovementCommand::FollowEntity {
                        target: *target,
                    };
                }
            }

            AIState::Retreat { from_target, .. } => {
                // –¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ: –ø—è—Ç–∏—Ç—å—Å—è –Ω–∞–∑–∞–¥, –Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤—Ä–∞–≥–∞
                let Some(target_entity) = from_target else {
                    if !matches!(*command, MovementCommand::Idle) {
                        *command = MovementCommand::Idle;
                    }
                    continue;
                };

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º RetreatFrom –¥–ª—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è
                if !matches!(*command, MovementCommand::RetreatFrom { target: t } if t == *target_entity) {
                    *command = MovementCommand::RetreatFrom {
                        target: *target_entity,
                    };
                }
            }
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: AI attack execution
///
/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ç–∞–∫–∏ –∫–æ–≥–¥–∞ –≤ Combat state –∏ target –≤ —Ä–∞–¥–∏—É—Å–µ.
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition –¥–ª—è distance checks
pub fn ai_attack_execution(
    mut ai_query: Query<(&AIState, &crate::StrategicPosition, &mut WeaponStats, &Stamina)>,
    targets_query: Query<&crate::StrategicPosition>,
    time: Res<Time<Fixed>>,
) {
    let delta = time.delta_secs();

    for (state, strategic_pos, mut weapon, stamina) in ai_query.iter_mut() {
        // –û–±–Ω–æ–≤–ª—è–µ–º cooldown
        if weapon.cooldown_timer > 0.0 {
            weapon.cooldown_timer -= delta;
        }

        // –ê—Ç–∞–∫—É–µ–º —Ç–æ–ª—å–∫–æ –≤ Combat state
        let AIState::Combat { target } = state else {
            continue;
        };

        let Ok(target_strategic_pos) = targets_query.get(*target) else {
            continue;
        };

        let current_world_pos = strategic_pos.to_world_position(0.5);
        let target_world_pos = target_strategic_pos.to_world_position(0.5);
        let distance = current_world_pos.distance(target_world_pos);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤ —Ä–∞–¥–∏—É—Å–µ, cooldown –≥–æ—Ç–æ–≤, –µ—Å—Ç—å stamina
        const ATTACK_COST: f32 = 20.0;
        if distance <= weapon.attack_radius
            && weapon.cooldown_timer <= 0.0
            && stamina.current >= ATTACK_COST
        {
            // –ê—Ç–∞–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É (combat systems –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç)
            // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º cooldown
            weapon.cooldown_timer = weapon.attack_cooldown;

            crate::log(&format!("AI: attacking target {:?}", target));
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: collision resolution (–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ NPC –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞)
///
/// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—ç–∫–∏–Ω–≥ actors –Ω–∞ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ.
/// ADR-005: –ò—Å–ø–æ–ª—å–∑—É–µ–º StrategicPosition, Godot –æ–±–Ω–æ–≤–∏—Ç –≤–∏–∑—É–∞–ª—ã —á–µ—Ä–µ–∑ PostSpawn
pub fn simple_collision_resolution(
    mut actors: Query<(&mut crate::StrategicPosition, Entity), With<Actor>>,
) {
    let positions: Vec<(Entity, Vec3)> = actors
        .iter()
        .map(|(sp, e)| (e, sp.to_world_position(0.5)))
        .collect();

    for (mut strategic_pos, entity) in actors.iter_mut() {
        let mut push = Vec3::ZERO;
        let current_pos = strategic_pos.to_world_position(0.5);

        for &(other_entity, other_pos) in &positions {
            if other_entity == entity {
                continue;
            }

            let diff = current_pos - other_pos;
            let distance = diff.length();

            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –º–µ–∂–¥—É actors
            const MIN_DISTANCE: f32 = 1.0;

            if distance < MIN_DISTANCE && distance > 0.001 {
                let push_force = (MIN_DISTANCE - distance) / MIN_DISTANCE;
                push += diff.normalize() * push_force * 0.1;
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º push –∫ StrategicPosition
        if push.length() > 0.001 {
            let new_pos = current_pos + push;
            *strategic_pos = crate::StrategicPosition::from_world_position(new_pos);
        }
    }
}

/// System: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—Ä—Ç–∏ ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ AI –≤ Dead state
///
/// –ü—Ä–∏ HP == 0 –æ—Ç–∫–ª—é—á–∞–µ–º AI (Dead state) —á—Ç–æ–±—ã –º–µ—Ä—Ç–≤—ã–µ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª–∏/–¥–≤–∏–≥–∞–ª–∏—Å—å
pub fn handle_actor_death(
    mut actors: Query<(&crate::Health, &mut AIState), Changed<crate::Health>>,
) {
    for (health, mut state) in actors.iter_mut() {
        if health.current == 0 && !matches!(*state, AIState::Dead) {
            *state = AIState::Dead;
            crate::log("Actor died ‚Üí AI disabled (Dead state)");
        }
    }
}

/// System: AI —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
///
/// –ï—Å–ª–∏ –∞–∫—Ç–æ—Ä–∞ —É–¥–∞—Ä–∏–ª–∏, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
/// - –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ç–∞–∫—É—é—â–µ–≥–æ –≤ SpottedEnemies (–µ—Å–ª–∏ –≤—Ä–∞–≥)
/// - –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –∫ –∞—Ç–∞–∫—É—é—â–µ–º—É (—á–µ—Ä–µ–∑ MovementCommand::FollowEntity)
/// - FSM –ø–µ—Ä–µ–π–¥—ë—Ç –≤ Combat –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ —á–µ—Ä–µ–∑ ai_fsm_transitions
///
/// –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é "—É–¥–∞—Ä–∏–ª–∏ –≤ —Å–ø–∏–Ω—É ‚Üí —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è –∏ –¥–µ—Ä—ë—à—å—Å—è"
pub fn react_to_damage(
    mut damage_events: EventReader<crate::combat::DamageDealt>,
    mut actors: Query<(&Actor, &mut SpottedEnemies, &mut MovementCommand)>,
    attackers: Query<&Actor>,
) {
    for damage_event in damage_events.read() {
        // –ü–æ–ª—É—á–∞–µ–º victim actor
        let Ok((victim_actor, mut spotted_enemies, mut command)) = actors.get_mut(damage_event.target) else {
            continue;
        };

        // –ü–æ–ª—É—á–∞–µ–º attacker actor
        let Ok(attacker_actor) = attackers.get(damage_event.attacker) else {
            continue;
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏: —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–∞–≥–æ–≤
        if victim_actor.faction_id == attacker_actor.faction_id {
            // Friendly fire ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É)
            continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ –≤ SpottedEnemies (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Ç–∞–º)
        if !spotted_enemies.enemies.contains(&damage_event.attacker) {
            spotted_enemies.enemies.push(damage_event.attacker);
            crate::log(&format!(
                "‚ö†Ô∏è {:?} damaged by {:?} ‚Üí added to SpottedEnemies",
                damage_event.target, damage_event.attacker
            ));
        }

        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –∫ –∞—Ç–∞–∫—É—é—â–µ–º—É (FollowEntity –¥–∞—Å—Ç NavigationAgent3D —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è)
        *command = MovementCommand::FollowEntity {
            target: damage_event.attacker,
        };

        crate::log(&format!(
            "üî• {:?} hit by {:?} ‚Üí following attacker",
            damage_event.target, damage_event.attacker
        ));
    }
}

/// System: AI —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∑–≤—É–∫ –≤—ã—Å—Ç—Ä–µ–ª–∞
///
/// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
/// - –°–ª—É—à–∞–µ—Ç WeaponFired —Å–æ–±—ã—Ç–∏—è (—Å–æ–¥–µ—Ä–∂–∞—Ç shooter_position + hearing_range)
/// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ StrategicPosition (chunk-aware distance)
/// - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ActorSpotted event –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ "—É—Å–ª—ã—à–∞–ª —Å—Ç—Ä–µ–ª—è–≤—à–µ–≥–æ"
/// - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç MovementCommand –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤—ã—Å—Ç—Ä–µ–ª–∞ —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º 3–º
///
/// –õ–æ–≥–∏–∫–∞:
/// - –í—Å–µ –∞–∫—Ç—ë—Ä—ã –≤ —Ä–∞–¥–∏—É—Å–µ —Å–ª—ã—à–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª (—Å–æ—é–∑–Ω–∏–∫–∏, –≤—Ä–∞–≥–∏, –Ω–µ–π—Ç—Ä–∞–ª—ã)
/// - Skip: —Å–∞–º —Å—Ç—Ä–µ–ª—è–≤—à–∏–π, –∞–∫—Ç—ë—Ä—ã —É–∂–µ –≤ Combat (—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ —Å–≤–æ–µ–π —Ü–µ–ª–∏)
/// - –†–∞–¥–∏—É—Å —Å–ª—ã—à–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ä—É–∂–∏—è (pistol ~25–º, rifle ~40–º, sniper ~60–º)
pub fn ai_react_to_gunfire(
    mut gunfire_events: EventReader<crate::combat::WeaponFired>,
    mut actors: Query<(Entity, &Actor, &crate::StrategicPosition, &AIState, &mut MovementCommand)>,
    mut spotted_events: EventWriter<GodotAIEvent>,
) {
    use rand::Rng;
    let mut rng = rand::thread_rng();

    for fire_event in gunfire_events.read() {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º world position ‚Üí StrategicPosition –¥–ª—è distance check
        let shooter_strategic = crate::StrategicPosition::from_world_position(
            fire_event.shooter_position
        );

        for (listener_entity, _listener_actor, listener_pos, ai_state, mut command) in actors.iter_mut() {
            // Skip: —Å–∞–º —Å—Ç—Ä–µ–ª—è–≤—à–∏–π
            if listener_entity == fire_event.shooter {
                continue;
            }

            // Skip: —É–∂–µ –≤ Combat (—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω –Ω–∞ —Å–≤–æ–µ–π —Ü–µ–ª–∏, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–µ—Ç—Å—è)
            if matches!(ai_state, AIState::Combat { .. }) {
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (chunk-aware distance —á–µ—Ä–µ–∑ world positions)
            let listener_world_pos = listener_pos.to_world_position(0.5);
            let shooter_world_pos = shooter_strategic.to_world_position(0.5);
            let distance = listener_world_pos.distance(shooter_world_pos);

            if distance > fire_event.hearing_range {
                continue;
            }

            // ‚úÖ –£—Å–ª—ã—à–∞–ª –≤—ã—Å—Ç—Ä–µ–ª!
            crate::log(&format!(
                "üîä Entity {:?} heard gunfire from {:?} at distance {:.1}m (range: {:.1}m)",
                listener_entity, fire_event.shooter, distance, fire_event.hearing_range
            ));

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ActorSpotted (–∏–º–∏—Ç–∞—Ü–∏—è "—É—Å–ª—ã—à–∞–ª –∏ –∑–∞–º–µ—Ç–∏–ª —Å—Ç—Ä–µ–ª—è–≤—à–µ–≥–æ")
            spotted_events.write(GodotAIEvent::ActorSpotted {
                observer: listener_entity,
                target: fire_event.shooter,
            });

            // –ò–¥—ë–º –≤ —Å—Ç–æ—Ä–æ–Ω—É –≤—ã—Å—Ç—Ä–µ–ª–∞ —Å —Ä–∞–∑–±—Ä–æ—Å–æ–º 3–º (–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
            let random_offset = Vec3::new(
                rng.gen_range(-1.0..1.0), // -1..1
                0.0,
                rng.gen_range(-1.0..1.0),
            ) * 3.0; // 3–º —Ä–∞–∑–±—Ä–æ—Å

            let investigate_pos = fire_event.shooter_position + random_offset;
            *command = MovementCommand::MoveToPosition {
                target: investigate_pos,
            };

            crate::log(&format!(
                "  ‚Üí Entity {:?} moving to investigate gunfire at {:?}",
                listener_entity, investigate_pos
            ));
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_ai_state_default() {
        let state = AIState::default();
        assert!(matches!(state, AIState::Idle));
    }

    #[test]
    fn test_ai_config_default() {
        let config = AIConfig::default();
        assert_eq!(config.retreat_stamina_threshold, 0.3);
        assert_eq!(config.retreat_health_threshold, 0.2);
        assert_eq!(config.retreat_duration, 2.0);
        assert_eq!(config.patrol_direction_change_interval, 3.0);
    }

    #[test]
    fn test_retreat_timer_logic() {
        let mut timer = 2.0;
        let delta = 0.5;

        timer -= delta;
        assert_eq!(timer, 1.5);

        timer -= delta;
        assert_eq!(timer, 1.0);

        timer -= delta;
        assert_eq!(timer, 0.5);

        timer -= delta;
        assert_eq!(timer, 0.0);
        assert!(timer <= 0.0); // Retreat –∑–∞–≤–µ—Ä—à–µ–Ω
    }

    #[test]
    fn test_find_nearest_target_logic() {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ (–±–µ–∑ App)
        let self_pos = Vec3::new(0.0, 0.0, 0.0);
        let target1_pos = Vec3::new(5.0, 0.0, 0.0); // distance = 5.0
        let target2_pos = Vec3::new(3.0, 0.0, 0.0); // distance = 3.0 (–±–ª–∏–∂–µ)
        let target3_pos = Vec3::new(15.0, 0.0, 0.0); // distance = 15.0 (–≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞)

        let max_range = 10.0;

        assert!(self_pos.distance(target1_pos) <= max_range);
        assert!(self_pos.distance(target2_pos) <= max_range);
        assert!(self_pos.distance(target2_pos) < self_pos.distance(target1_pos)); // target2 –±–ª–∏–∂–µ
        assert!(self_pos.distance(target3_pos) > max_range);
    }
}
