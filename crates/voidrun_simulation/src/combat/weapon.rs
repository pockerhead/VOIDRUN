//! Weapon system - –æ—Ä—É–∂–∏–µ –∏ —Å—Ç—Ä–µ–ª—å–±–∞
//!
//! Architecture:
//! - ECS: Weapon state (cooldown, decisions)
//! - Godot: Aim execution (bone rotation), Fire visual (spawn projectile)
//! - Events: WeaponFired (ECS‚ÜíGodot), ProjectileHit (Godot‚ÜíECS)

use bevy::prelude::*;

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ä—É–∂–∏—è (attached –∫ –∞–∫—Ç—ë—Ä—É)
#[derive(Component, Debug, Clone, Reflect)]
pub struct Weapon {
    /// –£—Ä–æ–Ω –∑–∞ –≤—ã—Å—Ç—Ä–µ–ª
    pub damage: u32,

    /// Cooldown –º–µ–∂–¥—É –≤—ã—Å—Ç—Ä–µ–ª–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
    pub fire_cooldown: f32,

    /// –¢–µ–∫—É—â–∏–π cooldown timer (—Å–µ–∫—É–Ω–¥—ã)
    pub cooldown_timer: f32,

    /// –î–∞–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—Ä–µ–ª–∞ (–º–µ—Ç—Ä—ã)
    pub range: f32,

    /// –°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏ (–º/—Å)
    pub projectile_speed: f32,
}

impl Default for Weapon {
    fn default() -> Self {
        Self {
            damage: 10,
            fire_cooldown: 0.5,
            cooldown_timer: 0.0,
            range: 20.0,
            projectile_speed: 30.0, // 8 –º/—Å (–º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏)
        }
    }
}

impl Weapon {
    /// –ú–æ–∂–µ—Ç –ª–∏ –æ—Ä—É–∂–∏–µ —Å—Ç—Ä–µ–ª—è—Ç—å (cooldown –≥–æ—Ç–æ–≤)
    pub fn can_fire(&self) -> bool {
        self.cooldown_timer <= 0.0
    }

    /// –ù–∞—á–∞—Ç—å cooldown –ø–æ—Å–ª–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
    pub fn start_cooldown(&mut self) {
        self.cooldown_timer = self.fire_cooldown;
    }
}

// ‚ùå Projectile –ù–ï —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ ECS ‚Äî —Ç–æ–ª—å–∫–æ –≤ Godot (tactical layer)
// Godot –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–ª–∞–¥–µ–µ—Ç lifecycle: spawn, physics, collision, cleanup
// ECS –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ Weapon state –∏ damage calculation

/// Event: –ê–∫—Ç—ë—Ä —Å—Ç—Ä–µ–ª—è–µ—Ç (ECS ‚Üí Godot)
/// ECS (strategic) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ "—Å—Ç—Ä–µ–ª—è—Ç—å –≤ target"
/// Godot (tactical) —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ direction –∏–∑ weapon bone (+Z axis)
#[derive(Event, Debug, Clone)]
pub struct WeaponFired {
    /// –ö—Ç–æ —Å—Ç—Ä–µ–ª—è–µ—Ç
    pub shooter: Entity,

    /// –í –∫–æ–≥–æ —Å—Ç—Ä–µ–ª—è–µ—Ç (–¥–ª—è Godot aim calculation)
    pub target: Entity,

    /// –£—Ä–æ–Ω –ø—É–ª–∏
    pub damage: u32,

    /// –°–∫–æ—Ä–æ—Å—Ç—å –ø—É–ª–∏
    pub speed: f32,
}

/// Event: Projectile –ø–æ–ø–∞–ª –≤ —Ü–µ–ª—å (Godot ‚Üí ECS)
#[derive(Event, Debug, Clone)]
pub struct ProjectileHit {
    /// –ö—Ç–æ –≤—ã—Å—Ç—Ä–µ–ª–∏–ª (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è self-hit)
    pub shooter: Entity,

    /// –í –∫–æ–≥–æ –ø–æ–ø–∞–ª–∏
    pub target: Entity,

    /// –£—Ä–æ–Ω
    pub damage: u32,
}

/// System: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ weapon cooldowns
pub fn update_weapon_cooldowns(
    mut weapons: Query<&mut Weapon>,
    time: Res<Time>,
) {
    for mut weapon in weapons.iter_mut() {
        if weapon.cooldown_timer > 0.0 {
            weapon.cooldown_timer -= time.delta_secs();
        }
    }
}

/// System: AI weapon fire logic
/// –ï—Å–ª–∏ –∞–∫—Ç—ë—Ä –≤ Combat state –∏ weapon ready ‚Üí fire
pub fn ai_weapon_fire(
    mut actors: Query<(Entity, &crate::ai::AIState, &Transform, &mut Weapon)>,
    targets: Query<&Transform>,
    mut fire_events: EventWriter<WeaponFired>,
) {
    use crate::ai::AIState;

    for (entity, state, transform, mut weapon) in actors.iter_mut() {
        // –°—Ç—Ä–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ Combat state (Dead –Ω–µ —Å—Ç—Ä–µ–ª—è–µ—Ç)
        if let AIState::Combat { target } = state {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            if !weapon.can_fire() {
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            if let Ok(target_transform) = targets.get(*target) {
                let to_target = target_transform.translation - transform.translation;
                let distance = to_target.length();

                if distance <= weapon.range && distance > 0.01 {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–∞ (Godot —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç direction –∏–∑ weapon bone)
                    fire_events.write(WeaponFired {
                        shooter: entity,
                        target: *target,
                        damage: weapon.damage,
                        speed: weapon.projectile_speed,
                    });

                    // –ù–∞—á–∏–Ω–∞–µ–º cooldown
                    weapon.start_cooldown();

                    crate::log(&format!(
                        "Actor {:?} fires weapon at {:?} (distance: {:.1}m)",
                        entity, target, distance
                    ));
                }
            }
        }
    }
}

/// System: –æ–±—Ä–∞–±–æ—Ç–∫–∞ ProjectileHit —Å–æ–±—ã—Ç–∏–π ‚Üí –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
/// Godot –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ collision detection
pub fn process_projectile_hits(
    mut hit_events: EventReader<ProjectileHit>,
    mut targets: Query<&mut crate::Health>,
    mut damage_events: EventWriter<crate::combat::DamageDealt>,
) {
    for hit in hit_events.read() {
        crate::log(&format!(
            "üéØ ProjectileHit: shooter={:?} ‚Üí target={:?} dmg={}",
            hit.shooter, hit.target, hit.damage
        ));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ self-hit (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!)
        if hit.shooter == hit.target {
            crate::log(&format!(
                "‚ö†Ô∏è SELF-HIT DETECTED! Entity {:?} hit itself!",
                hit.shooter
            ));
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º self-damage
        }

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏
        if let Ok(mut health) = targets.get_mut(hit.target) {
            let actual_damage = hit.damage.min(health.current);
            health.take_damage(actual_damage);

            let target_died = health.current == 0;

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DamageDealt event –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            damage_events.write(crate::combat::DamageDealt {
                attacker: hit.shooter,
                target: hit.target,
                damage: actual_damage,
                target_died,
            });

            crate::log(&format!(
                "üí• Projectile hit {:?} for {} damage (HP: {}, died: {})",
                hit.target, actual_damage, health.current, target_died
            ));
        }
    }
}

// ‚ùå cleanup_projectiles —É–¥–∞–ª–µ–Ω–∞ ‚Äî Godot –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª—è–µ—Ç lifecycle

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_weapon_cooldown() {
        let mut weapon = Weapon::default();
        assert!(weapon.can_fire());

        weapon.start_cooldown();
        assert!(!weapon.can_fire());
        assert_eq!(weapon.cooldown_timer, 0.5);
    }

    #[test]
    fn test_projectile_hit_event() {
        let shooter = Entity::PLACEHOLDER;
        let target = Entity::from_raw(1);

        let hit = ProjectileHit {
            shooter,
            target,
            damage: 20,
        };

        assert_eq!(hit.shooter, shooter);
        assert_eq!(hit.damage, 20);
    }
}
