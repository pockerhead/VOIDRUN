//! Weapon systems (cooldowns + ranged combat).

use bevy::prelude::*;
use crate::combat::{
    WeaponStats, WeaponFireIntent, ProjectileHit, ProjectileShieldHit, DamageDealt, DamageSource,
};

/// System: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ weapon cooldowns
pub fn update_weapon_cooldowns(
    mut weapons: Query<&mut WeaponStats>,
    time: Res<Time>,
) {
    for mut weapon in weapons.iter_mut() {
        if weapon.cooldown_timer > 0.0 {
            weapon.cooldown_timer -= time.delta_secs();
            weapon.cooldown_timer = weapon.cooldown_timer.max(0.0);
        }
    }
}

/// System: AI weapon fire intent (ECS strategic decision)
///
/// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (Hybrid Intent-based):
/// 1. ECS (strategic): –ü—Ä–æ–≤–µ—Ä—è–µ—Ç cooldown + AI state ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç WeaponFireIntent
/// 2. Godot (tactical): –ü—Ä–æ–≤–µ—Ä—è–µ—Ç distance/LOS ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Intent ‚Üí WeaponFired
///
/// –ü–æ—á–µ–º—É —Ç–∞–∫:
/// - ECS –Ω–µ –∑–Ω–∞–µ—Ç —Ç–æ—á–Ω—ã—Ö Godot positions (—Ç–æ–ª—å–∫–æ chunk-based StrategicPosition)
/// - Godot authoritative –¥–ª—è tactical validation (distance, line of sight)
/// - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: strategic intent vs tactical execution
pub fn ai_weapon_fire_intent(
    mut actors: Query<(Entity, &crate::ai::AIState, &mut WeaponStats)>,
    mut intent_events: EventWriter<WeaponFireIntent>,
) {
    use crate::ai::AIState;

    for (entity, state, mut weapon) in actors.iter_mut() {
        // –°—Ç—Ä–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ Combat state
        let AIState::Combat { target } = state else {
            continue;
        };

        // –¢–æ–ª—å–∫–æ ranged weapons
        if !weapon.is_ranged() {
            continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown (strategic constraint)
        if !weapon.can_attack() {
            continue;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º intent (Godot –ø—Ä–æ–≤–µ—Ä–∏—Ç distance/LOS)
        intent_events.write(WeaponFireIntent {
            shooter: entity,
            target: Some(*target),
            damage: weapon.base_damage,
            speed: weapon.projectile_speed,
            max_range: weapon.range,
            hearing_range: weapon.hearing_range,
        });

        // –ù–∞—á–∏–Ω–∞–µ–º cooldown (ECS –≤–ª–∞–¥–µ–µ—Ç cooldown state)
        weapon.start_cooldown();

        crate::logger::log(&format!(
            "Actor {:?} wants to fire at {:?} (intent generated)",
            entity, target
        ));
    }
}

/// System: –æ–±—Ä–∞–±–æ—Ç–∫–∞ ProjectileHit —Å–æ–±—ã—Ç–∏–π ‚Üí –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
///
/// Godot –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ collision detection.
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç damage —Å —É—á—ë—Ç–æ–º shield (ranged –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —â–∏—Ç–æ–º).
pub fn process_projectile_hits(
    mut hit_events: EventReader<ProjectileHit>,
    mut targets: Query<(&mut crate::Health, Option<&mut crate::components::EnergyShield>)>,
    mut damage_events: EventWriter<DamageDealt>,
) {
    for hit in hit_events.read() {
        crate::logger::log(&format!(
            "üéØ ProjectileHit: shooter={:?} ‚Üí target={:?} dmg={} at {:?}",
            hit.shooter, hit.target, hit.damage, hit.impact_point
        ));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ self-hit (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!)
        if hit.shooter == hit.target {
            crate::logger::log(&format!(
                "‚ö†Ô∏è SELF-HIT DETECTED! Entity {:?} hit itself!",
                hit.shooter
            ));
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º self-damage
        }

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏ (—Å —É—á—ë—Ç–æ–º shield)
        let Ok((mut health, mut shield_opt)) = targets.get_mut(hit.target) else {
            continue;
        };

        let applied = crate::combat::apply_damage_with_shield(
            &mut health,
            shield_opt.as_deref_mut(),
            hit.damage,
            DamageSource::Ranged,
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DamageDealt event –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        damage_events.write(DamageDealt {
            attacker: hit.shooter,
            target: hit.target,
            damage: hit.damage,
            source: DamageSource::Ranged,
            applied_damage: applied,
            impact_point: hit.impact_point,
            impact_normal: hit.impact_normal,
        });

        crate::logger::log(&format!(
            "üí• Projectile damage applied: {:?} (HP: {})",
            applied, health.current
        ));
    }
}

/// System: –æ–±—Ä–∞–±–æ—Ç–∫–∞ ProjectileShieldHit —Å–æ–±—ã—Ç–∏–π ‚Üí —Ä–∞–∑—Ä—è–¥–∫–∞ —â–∏—Ç–∞
///
/// Godot –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–æ–≥–¥–∞ projectile –∫–æ–ª–ª–∏–¥–∏—Ä—É–µ—Ç —Å ShieldSphere.
/// –ü—Ä–∏–º–µ–Ω—è–µ—Ç damage —Ç–æ–ª—å–∫–æ –∫ —â–∏—Ç—É (—É—Ä–æ–Ω –≤ health –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç).
/// Self-shield bypass —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ Godot layer.
pub fn process_projectile_shield_hits(
    mut hit_events: EventReader<ProjectileShieldHit>,
    mut targets: Query<(&mut crate::Health, Option<&mut crate::components::EnergyShield>)>,
    mut damage_events: EventWriter<DamageDealt>,
) {
    for hit in hit_events.read() {
        crate::logger::log(&format!(
            "üõ°Ô∏è ProjectileShieldHit: shooter={:?} ‚Üí shield={:?} dmg={} at {:?}",
            hit.shooter, hit.target, hit.damage, hit.impact_point
        ));

        // Paranoid validation: shooter != target (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ Godot)
        if hit.shooter == hit.target {
            crate::logger::log(&format!(
                "‚ö†Ô∏è SELF-SHIELD HIT! This should never happen (Godot bug?). Entity {:?}",
                hit.shooter
            ));
            continue;
        }

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —â–∏—Ç—É (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º health)
        let Ok((mut health, mut shield_opt)) = targets.get_mut(hit.target) else {
            continue;
        };

        let applied = crate::combat::apply_damage_with_shield(
            &mut health,
            shield_opt.as_deref_mut(),
            hit.damage,
            DamageSource::Ranged, // Shield blocks ranged
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DamageDealt event –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        damage_events.write(DamageDealt {
            attacker: hit.shooter,
            target: hit.target,
            damage: hit.damage,
            source: DamageSource::Ranged,
            applied_damage: applied,
            impact_point: hit.impact_point,
            impact_normal: hit.impact_normal,
        });

        crate::logger::log(&format!(
            "üõ°Ô∏è Shield absorbed damage: {:?} (HP: {} ‚Äî untouched)",
            applied, health.current
        ));
    }
}
