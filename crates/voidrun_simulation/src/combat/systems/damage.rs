//! Damage calculation and death systems.

use bevy::prelude::*;
use crate::components::{Health, Stamina};
use crate::combat::{WeaponStats, DamageDealt, EntityDied, DamageSource, AppliedDamage};

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ä: entity –º–µ—Ä—Ç–≤ (Health <= 0)
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (death animation, fade-out).
/// –î–µ—Å–ø–∞–≤–Ω –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ‚Äî —Ç—Ä—É–ø—ã –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ.
#[derive(Component, Debug)]
pub struct Dead;

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ä: –¥–µ—Å–ø–∞–≤–Ω entity –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
///
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É–±–æ—Ä–∫–∏ –º—ë—Ä—Ç–≤—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤.
/// –°–∏—Å—Ç–µ–º–∞ `despawn_after_timeout` –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏ —É–¥–∞–ª—è–µ—Ç entity + Godot node.
#[derive(Component, Debug)]
pub struct DespawnAfter {
    /// –í—Ä–µ–º—è –¥–µ—Å–ø–∞–≤–Ω–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã)
    pub despawn_time: f32,
}

/// –°–∏—Å—Ç–µ–º–∞: apply damage (placeholder –¥–ª—è Godot-driven combat)
///
/// TODO: –ë—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å GodotCombatEvent::WeaponHit –∫–æ–≥–¥–∞ Godot integration –≥–æ—Ç–æ–≤
/// –°–µ–π—á–∞—Å: stub system –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
pub fn apply_damage(
    mut _damage_dealt_events: EventWriter<DamageDealt>,
    mut _entity_died_events: EventWriter<EntityDied>,
    mut _targets: Query<(&mut Health, Option<&Stamina>)>,
    _attackers: Query<(&WeaponStats, &Stamina)>,
) {
    // TODO: –ß–∏—Ç–∞—Ç—å GodotCombatEvent::WeaponHit events
    // Godot AnimationTree trigger hitbox ‚Üí WeaponHit { attacker, target } ‚Üí apply_damage
    //
    // for event in godot_combat_events.read() {
    //     match event {
    //         GodotCombatEvent::WeaponHit { attacker, target } => {
    //             apply_weapon_hit(*attacker, *target, &mut targets, &attackers, ...);
    //         }
    //     }
    // }

    // Stub –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ Godot integration
}

/// –í—ã—á–∏—Å–ª—è–µ—Ç final damage —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
///
/// –§–æ—Ä–º—É–ª–∞:
/// - Base damage √ó stamina_multiplier(attacker)
/// - stamina_multiplier = sqrt(stamina_percent)
///   - 100% stamina ‚Üí 1.0x damage
///   - 50% stamina ‚Üí 0.707x damage
///   - 25% stamina ‚Üí 0.5x damage
///
/// –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –Ω–∏–∑–∫–∞—è stamina attacker –Ω–∞–Ω–æ—Å–∏—Ç –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞.
pub fn calculate_damage(
    base_damage: u32,
    attacker_stamina: Option<&Stamina>,
    _target_stamina: Option<&Stamina>, // –î–ª—è –±—É–¥—É—â–∏—Ö defense –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
) -> u32 {
    let mut final_damage = base_damage as f32;

    // Stamina multiplier –¥–ª—è attacker
    if let Some(stamina) = attacker_stamina {
        let stamina_percent = stamina.current / stamina.max;
        let multiplier = stamina_percent.sqrt(); // sqrt –¥–ª—è –º—è–≥–∫–æ–≥–æ scaling
        final_damage *= multiplier;
    }

    // TODO: Target armor/defense –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

    final_damage.round() as u32
}

/// Apply damage with shield absorption logic
///
/// Shield blocks ONLY Ranged damage (slow kinetic like melee bypasses shield).
/// Returns AppliedDamage for VFX feedback.
///
/// # Logic
/// - Ranged damage: Shield absorbs if active, overflow goes to health
/// - Melee damage: Bypasses shield completely (slow kinetic)
/// - Environmental: Direct damage (TODO: future logic)
pub fn apply_damage_with_shield(
    target_health: &mut crate::Health,
    target_shield: Option<&mut crate::components::EnergyShield>,
    damage: u32,
    damage_source: DamageSource,
) -> AppliedDamage {
    // Shield blocks ONLY Ranged (and only if active)
    // When shield is inactive (current_energy <= 0 OR not reached 50% threshold),
    // projectile passes through and hits body directly
    if damage_source == DamageSource::Ranged {
        if let Some(shield) = target_shield {
            // Check if shield is active (hysteresis: deactivates at 0%, reactivates at 50%)
            if shield.is_active() {
                let shield_damage = damage as f32;
                shield.take_damage(shield_damage);
                shield.update_active_state(); // Update active state after damage

                // Shield broke? ‚Üí overflow damage to health
                if shield.current_energy <= 0.0 {
                    let overflow = (-shield.current_energy) as u32;
                    if overflow > 0 {
                        target_health.take_damage(overflow);
                        crate::logger::log(&format!(
                            "üí• Shield BROKEN! Overflow: {} damage",
                            overflow
                        ));
                        return AppliedDamage::ShieldBrokenWithOverflow(overflow);
                    }
                }

                crate::logger::log("üõ°Ô∏è Shield absorbed damage");
                return AppliedDamage::ShieldAbsorbed;
            } else {
                // Shield exists but inactive ‚Üí direct damage to body
                crate::logger::log("üõ°Ô∏è Shield INACTIVE ‚Äî projectile bypassed shield");
            }
        }
    }

    // Melee, Environmental, –∏–ª–∏ —â–∏—Ç–∞ –Ω–µ—Ç ‚Üí –ø—Ä—è–º–æ–π —É—Ä–æ–Ω
    target_health.take_damage(damage);
    AppliedDamage::Direct
}

/// System: Shield recharge (–≤–Ω–µ –±–æ—è) + hysteresis update
///
/// Tick shield energy regeneration –ø–æ—Å–ª–µ recharge_delay.
/// Updates active state based on hysteresis logic (deactivate at 0%, reactivate at 50%).
/// Runs in FixedUpdate (64 Hz).
pub fn shield_recharge_system(
    mut shields: Query<&mut crate::components::EnergyShield>,
    time: Res<Time>,
) {
    for mut shield in shields.iter_mut() {
        shield.tick(time.delta_secs());
        shield.update_active_state(); // Hysteresis logic (activate at 50%)
    }
}

/// –°–∏—Å—Ç–µ–º–∞: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ AI –ø—Ä–∏ —Å–º–µ—Ä—Ç–∏
///
/// –£–±–∏—Ä–∞–µ—Ç AIState –∏ MovementCommand –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É –º–µ—Ä—Ç–≤—ã—Ö entities.
/// –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä Dead –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
pub fn disable_ai_on_death(
    mut commands: Commands,
    mut death_events: EventReader<EntityDied>,
) {
    for event in death_events.read() {
        // –£–¥–∞–ª—è–µ–º AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ Commands
        if let Ok(mut entity_commands) = commands.get_entity(event.entity) {
            entity_commands.remove::<crate::ai::AIState>();
            entity_commands.remove::<crate::components::MovementCommand>();
            entity_commands.insert(Dead);

            crate::logger::log(&format!("INFO: Disabled AI for dead entity {:?}", event.entity));
        }
    }
}

/// –°–∏—Å—Ç–µ–º–∞: –¥–µ—Å–ø–∞–≤–Ω entities —Å –∏—Å—Ç—ë–∫—à–∏–º DespawnAfter timeout
///
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ entities —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º DespawnAfter.
/// –£–¥–∞–ª—è–µ—Ç entity –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è >= despawn_time.
/// Godot node —É–¥–∞–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ despawn_actor_visuals_main_thread.
pub fn despawn_after_timeout(
    mut commands: Commands,
    query: Query<(Entity, &DespawnAfter)>,
    time: Res<Time>,
) {
    let current_time = time.elapsed_secs();

    for (entity, despawn_after) in query.iter() {
        if current_time >= despawn_after.despawn_time {
            crate::logger::log(&format!("‚ö∞Ô∏è Despawning entity {:?} (timeout)", entity));
            commands.entity(entity).despawn();
        }
    }
}
